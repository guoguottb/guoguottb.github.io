<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown使用教程</title>
    <url>/2022/01/31/markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1><span id="标题一">标题一</span></h1><h2><span id="标题二">标题二</span></h2><h3><span id="标题三">标题三</span></h3><h4><span id="标题四">标题四</span></h4><h5><span id="标题五">标题五</span></h5><h6><span id="标题六">标题六</span></h6><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"># 标题一 		<span class="hljs-comment">// 等同于 ctrl + 1 </span><br>## 标题二<br>### 标题三<br>#### 标题四 <br>##### 标题五 <br>###### 标题六 <br></code></pre></td></tr></table></figure>

<blockquote>
<p>这是一段引用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&gt;空格<br></code></pre></td></tr></table></figure>

<p>有序列表</p>
<ol>
<li>打开冰箱</li>
<li>把大象装进冰箱</li>
<li>关上冰箱</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>空格<br></code></pre></td></tr></table></figure>

<p>无序列表</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-空格</span><br>*空格<br><span class="hljs-addition">+空格</span><br></code></pre></td></tr></table></figure>

<p>多选任务列表</p>
<ul>
<li><input checked disabled type="checkbox"> 吃饭</li>
<li><input checked disabled type="checkbox"> 睡觉</li>
<li><input disabled type="checkbox"> 打豆豆</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">-[x]吃饭<br>-[x]睡觉<br>-[ ]打豆豆<br></code></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">```<br><br>---<br><br>~~~js<br>```vue<br>~~~<br><br>---<br><br>表格<br><br>| 姓名 | 年龄 | 成绩 |<br>| :--- | ---- | ---- |<br>|      |      |      |<br><br>```js<br>|姓名|年龄|成绩| + 回车<br></code></pre></td></tr></table></figure>

<p>脚注</p>
<p>一键三连<a href="%E7%82%B9%E8%B5%9E%EF%BC%8C%E6%8A%95%E5%B8%81%EF%BC%8C%E6%94%B6%E8%97%8F%EF%BC%8C%E6%9C%80%E5%A5%BD%E5%86%8D%E5%85%B3%E6%B3%A8%E4%B8%80%E4%B8%8B">^三连</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">一键三连[^三联]<br></code></pre></td></tr></table></figure>

<p>链接</p>
<p><a href="https://guoguottb.github.io/" title="博客首页">博主首页</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">[博主首页](网址 <span class="hljs-string">&quot;标题文字悬浮的时候可以看到&quot;</span>)			<span class="hljs-comment">// 中括号 + 英文括号</span><br></code></pre></td></tr></table></figure>

<p>引用链接</p>
<p><a href="https://guoguottb.github.io/" title="博客首页">博主博客</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">[id]:网址 <span class="hljs-string">&quot;标题文字悬浮的时候可以看到&quot;</span><br></code></pre></td></tr></table></figure>

<p>标题</p>
<p>请参考<a href="#%E6%A0%87%E9%A2%98%E4%B8%80">标题一</a></p>
<p>链接URL</p>
<p><a href="https://guoguottb.github.io/">https://guoguottb.github.io</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果写了https协议会自动生成链接</span><br></code></pre></td></tr></table></figure>

<p>行内格式</p>
<p><em>倾斜</em>  <strong>加粗</strong>	<code>input</code>	<u>下划线</u>	:smile:	</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  *倾斜*	**加粗**	`input`	&lt;u&gt;下划线&lt;/u&gt;	:smile:		// 标签可以参考emoji国际通用标签代码</span><br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>测试了图片，音频和视频</title>
    <url>/2022/03/01/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%EF%BC%8C%E9%9F%B3%E9%A2%91%E5%92%8C%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h3><span id="1-测试图片">1. 测试图片</span></h3>
    <figure class="figure-image">
      <img src="https://qiniu.sukoshi.xyz/src/images/68686407_p0.jpg" alt="带描述带图片" loading="lazy">
      <figcaption>带描述带图片</figcaption>
    </figure>
  

<h3><span id="2-测试音频">2. 测试音频</span></h3><div class="aplayer-box" data-url="https://qiniu.sukoshi.xyz/public/music/鹿乃 - アイロニ.mp3" data-name="アイロニ" data-artist="鹿乃" data-cover="https://qiniu.sukoshi.xyz/public/music/鹿乃 - アイロニ.jpg" data-lrc="https://qiniu.sukoshi.xyz/public/music/鹿乃 - アイロニ.lrc" data-lrctype="3"></div>

<h3><span id="3-测试视频">3. 测试视频</span></h3><div class="dplayer-box" data-url="https://qiniu.sukoshi.xyz/video/%E7%BE%8E.mp4" data-pic="https://qiniu.sukoshi.xyz/video/%E7%BE%8E.mp4?vframe/jpg/offset/10"></div>
]]></content>
      <tags>
        <tag>图片</tag>
        <tag>音频</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>css题目</title>
    <url>/2022/08/31/css%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<h3><span id="1-如何水平垂直居中一个元素">1. 如何水平垂直居中一个元素</span></h3><ol>
<li>flex布局的方式，主轴justify-content：center，侧轴：align-items: center  </li>
<li>定位 + margin，top：50%，left：50%，margin-left ：盒子自身一半的宽度，margin-top：盒子自身高度的一半。   </li>
<li>定位 + transform，top：50%，left：50%，translate：（-50%，-50%）</li>
</ol>
<h3><span id="2-css标准盒模型和ie盒模型的区别">2. css标准盒模型和ie盒模型的区别</span></h3><blockquote>
<p>IE盒模型</p>
</blockquote>
<ul>
<li>width表示 content + padding + border 这三个部分的宽度</li>
<li>box - sizing : border - box 是IE盒子模型</li>
</ul>
<blockquote>
<p>标准盒模型</p>
</blockquote>
<ul>
<li>width指内容部分的宽度，不包括border和padding，所以设置这两个属性会使盒子被撑大</li>
<li>box-sizing : content - box 使W3C盒子模型</li>
</ul>
<h3><span id="3-css3新属性">3. css3新属性</span></h3><ol>
<li><p>颜色，RGBA：红绿蓝三原色，A是透明度，HSLA：色调，饱和度，亮度，透明度</p>
</li>
<li><p>文字阴影：text-shadow</p>
</li>
<li><p>盒子阴影：box-shadow</p>
</li>
<li><p>边框圆角：border-radius</p>
</li>
<li><p>背景大小：background-size：cover；把背景图像扩展至足够大，以使背景图像完全覆盖背景区域，背景图像的某些部分也许无法显示在背景定位区域中。background-size：contain；把图像扩展到最大尺寸，以使其宽度和高度完全适应内容区域，可能会失帧</p>
</li>
<li><p>transition&#x2F;渐变&#x2F;自定义动画&#x2F;媒体查询&#x2F;边框图片&#x2F;2&#x2F;3D转换</p>
</li>
</ol>
<h3><span id="4-html5开发中遇到那些问题怎么解决的">4. HTML5开发中遇到那些问题？怎么解决的？</span></h3><ol>
<li>同一张照片放在不同大小设备下显示的时候会导致图片失帧，解决办法就是使用2倍图，一般会在精灵图上面。</li>
<li>禁止手机放大缩小，通常把user-saclable设置为0来关闭用户对页面视图缩放的行为</li>
<li>上下拉动滚动条时卡顿，慢</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	-webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">    <span class="attribute">overflow</span>-scrolling: touchl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>给盒子加padding或者border会撑大盒子，因为默认时W3C标准盒子模型，宽度只包含内容，解决方案：box-sizing:  border-box，开启盒子内减模式</li>
<li>外边距塌陷：嵌套的两个块元素，给子元素设置一个向上的外边距，此时的父元素会跟着掉下来，形成外边距塌陷，解决方案：</li>
</ol>
<ul>
<li>给父元素设置上边距</li>
<li>给父元素设置overflow属性</li>
<li>给父元素或者子元素设置浮动</li>
<li>绝对定位或者固定定位</li>
<li>给父元素加padding</li>
</ul>
<ol start="6">
<li>png24位的图片在ie6中出现背景，解决方案：做成png8的</li>
<li>浏览器默认的内外边距不一致，解决方案全局设置css样式  *  { margin : 0 ; padding : 0 }</li>
<li>行内块元素默认有间隙，之间转换位块级元素，然后float或者display: flex</li>
<li>图片和文字没有对其，解决方案：vertical - align: middle</li>
</ol>
<h3><span id="5-什么是bfc">5. 什么是BFC？</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>块级格式化上下文，BFC是一个独立布局的环境，其中的元素布局不受外界的影响，在同一个BFC中，块盒和行盒都会垂直的沿着其父级元素的边框排列</p>
<blockquote>
<p>如何产生的及缺点</p>
</blockquote>
<ul>
<li>position: absolute； </li>
<li>display：inline-block，table-cell，flex，table-caption或者inline-flex。缺点：可能引发响应性问题</li>
<li>float：left&#x2F;right；缺点：float：left会把元素移至左侧，并被其它元素环绕</li>
<li>overflow：hidden，scroll，auto，clip，（overflow的值不是visible），缺点：overflow：scroll可能产生多余的滚动条，overflow：hidden将裁切移除元素</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>利用BFC可避免外边距塌陷，当两个相邻元素在不同的BFC中，就能避免外边距塌陷的问题</p>
<h3><span id="6-想让某一块区域出现滚动条">6. 想让某一块区域出现滚动条</span></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">92px</span>;</span><br><span class="line"><span class="attribute">bottom</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">overflow-y</span>:scroll;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br></pre></td></tr></table></figure>

<h3><span id="7-如何在chrome浏览器中让字体改成小于12px">7. 如何在Chrome浏览器中让字体改成小于12px？</span></h3><p>做法：加webkit前缀，用transform：scale()这个属性进行缩放！</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">10px</span>;</span><br><span class="line">    webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="8-flex布局">8. flex布局</span></h3><p>flex &#x3D; 1是哪三个属性的缩写</p>
<ul>
<li>flex-grow：默认值为0，指的是相对于其他的子元素的扩展比率</li>
<li>flex-shink：默认值为1，指的是相对与其他元素的收缩比率</li>
<li>flex-basis：默认值为auto，指的是子元素的具体长度，可以为长度（rem，px，em）也可以为百分比</li>
</ul>
<h3><span id="9-remx2femx2fpxx2fvhx2fvw">9. rem&#x2F;em&#x2F;px&#x2F;vh&#x2F;vw</span></h3><ul>
<li>px，绝对单位，像素</li>
<li>rem，相对单位，相比于html根节点字体大小</li>
<li>em，相对单位，相对于父元素字体大小，1em&#x3D;16px</li>
<li>vw&#x2F;vm，相对单位，相对于视口宽度&#x2F;高度，1vh&#x2F;1vm等于视口宽&#x2F;高的1%</li>
</ul>
<h3><span id="10-margin重叠外边距塌陷怎么解决">10. margin重叠，外边距塌陷怎么解决</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>当子盒子在父盒子里面，给子盒子设置margin-top父盒子会掉下来</p>
<blockquote>
<p>解决办法（触发BFC）</p>
</blockquote>
<ul>
<li>子级加position：absolute</li>
<li>父级加overflow：hidden</li>
<li>父级加padding</li>
<li>父级加border</li>
</ul>
<h3><span id="11-清除浮动">11. 清除浮动</span></h3><ol>
<li>给浮动元素的父级加上overflow：hidden</li>
<li>在浮动的子元素最后面加个空标签属性写clear：both，但是这个标签是没有加载的，不怎么可取</li>
<li>使用after伪元素，其实也是加clear：both</li>
<li>直接给父级设置高度</li>
</ol>
<h3><span id="12-css画三角形等边三角形">12. css画三角形(等边三角形)</span></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">. box &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">100px</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="13-position的属性有哪些区别是什么">13. position的属性有哪些，区别是什么</span></h3><ul>
<li><code>absolute</code>生成绝对定位的元素，相对于<code>static定位之外</code>的<code>第一个父元素</code>进行定位。元素的位置通过<code>left</code>，<code>top</code>，<code>right</code>，<code>bottom</code>属性进行规定</li>
<li><code>reletive</code>生成相对定位的元素，<code>相对与其原来的位置进行定位</code>，元素的位置通过<code>left</code>，<code>top</code>，<code>right</code>，<code>bottom</code>属性进行规定</li>
<li><code>fixed</code>生成绝对定位的元素，指定元素<code>相对于屏幕视口</code>（viewport）的位置来指定元素位置，元素的位置在<code>屏幕滚动时不会改变</code>比如回到顶部的按钮一般都是用此定位方式</li>
<li><code>static</code>默认值，没有定位，元素出现在正常的文档流中，会忽略<code>left</code>，<code>top</code>，<code>right</code>，<code>bottom</code>或者<code>z-index</code>声明，<code>遵循标准流</code></li>
<li><code>inherit</code>规定从父级元素<code>继承position属性的值</code></li>
</ul>
<h3><span id="14-css隐藏元素">14. css隐藏元素</span></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>; 属性可以传递一个 <span class="number">0</span> 到 <span class="number">1</span> 之间的数字，或者 <span class="number">0%</span> 和 <span class="number">100%</span> 之间的百分比，对应地表示完全透明和完全不透明。</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">02</span> rgbc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)	透明度为<span class="number">0</span></span><br><span class="line"><span class="number">03</span> <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>) || <span class="built_in">translate</span>(-<span class="number">99999px</span>,<span class="number">0</span>)	元素缩放</span><br><span class="line"><span class="number">04</span> visibility: hidden; 隐藏元素</span><br><span class="line"><span class="number">05</span> <span class="attribute">display</span>:none; css隐藏</span><br><span class="line"><span class="number">06</span> <span class="attribute">z-index</span>:-<span class="number">1</span>;	权重负</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>promise源码</title>
    <url>/2022/09/02/promise%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">尽可能还原 Promise 中的每一个 API, 并通过注释的方式描述思路和原理.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义三个状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;PENDING&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESOLVED</span> = <span class="string">&quot;RESOLVED&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;REJECTED&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">x, promise2, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">//判断x === promise, 抛出类型错误</span></span><br><span class="line">  <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;类型错误&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许状态改变一次</span></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//判断x是否包含then属性，thenable</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> &amp;&amp; x !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> then = x.<span class="property">then</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(typeof then)</span></span><br><span class="line">        x.<span class="title function_">then</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">resolvePromise</span>(v, promise2, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">reject</span>(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">        called = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      <span class="title function_">resolve</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">    called = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">reject</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">exectuor</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//捕获执行器错误</span></span><br><span class="line">      <span class="title function_">exectuor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  status = <span class="variable constant_">PENDING</span>;	<span class="comment">// 存promise的状态 默认是等待态</span></span><br><span class="line">  value = <span class="literal">null</span>;	<span class="comment">// 存成功结果的值</span></span><br><span class="line">  reason = <span class="literal">null</span>; <span class="comment">//存失败的结果的值</span></span><br><span class="line">  <span class="comment">//存储失败和成功的回调</span></span><br><span class="line">    <span class="comment">// 为什么是数组：因为promise实例可以多次调用</span></span><br><span class="line">  onFullFilledCallbacks = [];</span><br><span class="line">  onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr, i, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curr <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          curr.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              prev[i] = v;</span><br><span class="line">              <span class="keyword">if</span> (prev.<span class="property">length</span> === arr.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(prev);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          prev[i] = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">      &#125;, []);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(v));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(r);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">addData</span>(<span class="params">prev, index, value</span>) &#123;</span><br><span class="line">        prev[index] = value;</span><br><span class="line">        <span class="keyword">if</span> (prev.<span class="property">length</span> === args.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(prev);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curr <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          curr.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">addData</span>(prev, index, &#123;</span><br><span class="line">                <span class="attr">value</span>: res,</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">addData</span>(prev, index, &#123;</span><br><span class="line">                <span class="attr">reason</span>: r,</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(prev, index, &#123;</span><br><span class="line">            <span class="attr">reason</span>: curr,</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      args.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          item.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">cb</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> v);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">cb</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> r;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolve = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//只有状态为pending才执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">RESOLVED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = v;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">onFullFilledCallbacks</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFullFilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> <span class="title function_">c</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  reject = <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = r;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> <span class="title function_">c</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFullFilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">    <span class="comment">//onFullFilled onRejected类型判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullFilled !== <span class="string">&quot;function&quot;</span>) onFullFilled = <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullFilled !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      onRejected = <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> r;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">RESOLVED</span>) &#123;</span><br><span class="line">        <span class="comment">// Promise为微任务，所以放到微任务队列执行</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFullFilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">resolvePromise</span>(x, promise2, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">            <span class="title function_">resolvePromise</span>(x, promise2, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">//如果状态为pending，则执行方法放入数组中，等待resolve或reject时候执行</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFullFilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onFullFilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">              <span class="title function_">resolvePromise</span>(x, promise2, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">              <span class="title function_">resolvePromise</span>(x, promise2, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">deferred</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  result.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    result.<span class="property">resolve</span> = resolve;</span><br><span class="line">    result.<span class="property">reject</span> = reject;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Promise</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>promise源码</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3</title>
    <url>/2022/05/22/vue3/</url>
    <content><![CDATA[<h3><span id="1-vue3创建工程">1. vue3创建工程</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cmd 查看版本 确保@vue/cli版本在4.5.0以上   否则  npm i -g @vue/cli 下载更高的版本</span></span><br><span class="line"><span class="number">1.</span> vue -V</span><br><span class="line">   vue --version</span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line"><span class="number">2.</span> vue create vue3_demo</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>ts</title>
    <url>/2022/07/17/ts/</url>
    <content><![CDATA[<p>创建vite&#x2F;ts项目：npm create vite 文件名</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>MDN方法</title>
    <url>/2022/09/11/MDN%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3><span id="1-arrayprototypeconcat">1. Array.prototype.concat()</span></h3><p>return newArray （数组1，数组2）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = array1.<span class="title function_">concat</span>(array2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array3);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>

<h3><span id="2-arrayprototypeevery">2. Array.prototype.every()</span></h3><p>return boolean</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isBelowThreshold</span> = (<span class="params">currentValue</span>) =&gt; currentValue &lt; <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">every</span>(isBelowThreshold));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br></pre></td></tr></table></figure>

<h3><span id="3-arrayprototypefill">3. Array.prototype.fill()</span></h3><p>return fill 之后的 newArray (起始索引，目标值，终止索引)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill with 0 from position 2 until position 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: [1, 2, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill with 5 from position 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">5</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// expected output: [1, 5, 5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// expected output: [6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure>

<h3><span id="4-arrayprototypefilter">4. Array.prototype.filter()</span></h3><p>return newArray （item，index，array）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span></span><br></pre></td></tr></table></figure>

<h3><span id="5-arrayprototypefind-x2f-arrayprototypefindlast">5. Array.prototype.find()   &#x2F;  Array.prototype.findLast()</span></h3><p>return item &#x2F; undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found);</span><br><span class="line"><span class="comment">// expected output: 12</span></span><br></pre></td></tr></table></figure>

<h3><span id="6-arrayprototypefindindex-x2f-arrayprototypefindlastindex">6. Array.prototype.findIndex()    &#x2F;     Array.prototype.findLastIndex()</span></h3><p>return -1 &#x2F; index</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isLargeNumber</span> = (<span class="params">element</span>) =&gt; element &gt; <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">findIndex</span>(isLargeNumber));</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br></pre></td></tr></table></figure>

<h3><span id="7-arrayfrom">7. Array.from()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;foo&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x));</span><br><span class="line"><span class="comment">// expected output: Array [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<h3><span id="8arrayprototypeincludes">8.Array.prototype.includes()</span></h3><p>return boolean</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">includes</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="title function_">includes</span>(<span class="string">&#x27;cat&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="title function_">includes</span>(<span class="string">&#x27;at&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: false</span></span><br></pre></td></tr></table></figure>

<h3><span id="9arrayprototypeindexof">9.Array.prototype.indexOf()\</span></h3><p>return index &#x2F; -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start from index 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;giraffe&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: -1</span></span><br></pre></td></tr></table></figure>

<h3><span id="10-arrayisarray">10. Array.isArray()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start from index 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;giraffe&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: -1</span></span><br></pre></td></tr></table></figure>

<h3><span id="11-arrayprototypejoin">11. Array.prototype.join()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>());</span><br><span class="line"><span class="comment">// expected output: &quot;Fire,Air,Water&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;FireAirWater&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;Fire-Air-Water&quot;</span></span><br></pre></td></tr></table></figure>

<h3><span id="12-arrayprototypereverse">12. Array.prototype.reverse()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array1:&#x27;</span>, array1);</span><br><span class="line"><span class="comment">// expected output: &quot;array1:&quot; Array [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reversed = array1.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reversed:&#x27;</span>, reversed);</span><br><span class="line"><span class="comment">// expected output: &quot;reversed:&quot; Array [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Careful: reverse is destructive -- it changes the original array.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array1:&#x27;</span>, array1);</span><br><span class="line"><span class="comment">// expected output: &quot;array1:&quot; Array [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br></pre></td></tr></table></figure>

<h3><span id="12-arrayprototypeslice">12. Array.prototype.slice()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(-<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>, -<span class="number">1</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>());</span><br><span class="line"><span class="comment">// expected output: Array [&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br></pre></td></tr></table></figure>

<h3><span id="12-arrayprototypesort">12. Array.prototype.sort()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>];</span><br><span class="line">months.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">100000</span>];</span><br><span class="line">array1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1);</span><br><span class="line"><span class="comment">// expected output: Array [1, 100000, 21, 30, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">38</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b));</span><br><span class="line"><span class="comment">//  expected output: Array [1, 3, 5, 6, 7, 9, 22, 38]</span></span><br></pre></td></tr></table></figure>

<h3><span id="13-arrayprototypesplice">13. Array.prototype.splice()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);	<span class="comment">// [1, 3, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">3</span>));		<span class="comment">// [7, 9]</span></span><br></pre></td></tr></table></figure>

<h3><span id="14-arrayprototypepush">14. Array.prototype.push()</span></h3><p>return newLength</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;pigs&#x27;</span>, <span class="string">&#x27;goats&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = animals.<span class="title function_">push</span>(<span class="string">&#x27;cows&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;]</span></span><br><span class="line"></span><br><span class="line">animals.<span class="title function_">push</span>(<span class="string">&#x27;chickens&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;, &quot;chickens&quot;, &quot;cats&quot;, &quot;dogs&quot;]</span></span><br></pre></td></tr></table></figure>

<h3><span id="15-arrayprototypepop">15. Array.prototype.pop()</span></h3><p>return remove item</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> plants = [<span class="string">&#x27;broccoli&#x27;</span>, <span class="string">&#x27;cauliflower&#x27;</span>, <span class="string">&#x27;cabbage&#x27;</span>, <span class="string">&#x27;kale&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plants.<span class="title function_">pop</span>());</span><br><span class="line"><span class="comment">// expected output: &quot;tomato&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plants);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;broccoli&quot;, &quot;cauliflower&quot;, &quot;cabbage&quot;, &quot;kale&quot;]</span></span><br><span class="line"></span><br><span class="line">plants.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plants);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;broccoli&quot;, &quot;cauliflower&quot;, &quot;cabbage&quot;]</span></span><br></pre></td></tr></table></figure>

<h3><span id="16-arrayprototypeunshift">16.  Array.prototype.unshift()</span></h3><p>return new length</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">unshift</span>(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1);</span><br><span class="line"><span class="comment">// expected output: Array [4, 5, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3><span id="17-arrayprototypeshift">17. Array.prototype.shift()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstElement = array1.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1);</span><br><span class="line"><span class="comment">// expected output: Array [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstElement);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br></pre></td></tr></table></figure>

<h3><span id="18-arrayprototypereduce">18. Array.prototype.reduce()</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,]</span><br><span class="line"><span class="keyword">const</span> N = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(N);   <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,]</span><br><span class="line"><span class="keyword">const</span> N = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(N); 	<span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2022/09/11/webpack/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>, <span class="comment">// &quot;production&quot; | &quot;development&quot; | &quot;none&quot;</span></span><br><span class="line">  <span class="comment">// Chosen mode tells webpack to use its built-in optimizations accordingly.</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./app/entry&quot;</span>, <span class="comment">// string | object | array</span></span><br><span class="line">  <span class="comment">// 默认为 ./src</span></span><br><span class="line">  <span class="comment">// 这里应用程序开始执行</span></span><br><span class="line">  <span class="comment">// webpack 开始打包</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// webpack 如何输出结果的相关选项</span></span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// string (default)</span></span><br><span class="line">    <span class="comment">// 所有输出文件的目标路径</span></span><br><span class="line">    <span class="comment">// 必须是绝对路径（使用 Node.js 的 path 模块）</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">// string (default)</span></span><br><span class="line">    <span class="comment">// entry chunk 的文件名模板</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/assets/&quot;</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 输出解析文件的目录，url 相对于 HTML 页面</span></span><br><span class="line">    <span class="attr">library</span>: &#123; <span class="comment">// 这里有一种旧的语法形式可以使用（点击显示）</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;umd&quot;</span>, <span class="comment">// 通用模块定义</span></span><br><span class="line">      <span class="comment">// the type of the exported library</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;MyLibrary&quot;</span>, <span class="comment">// string | string[]</span></span><br><span class="line">      <span class="comment">// the name of the exported library</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Advanced output.library configuration (click to show) */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">uniqueName</span>: <span class="string">&quot;my-application&quot;</span>, <span class="comment">// (defaults to package.json &quot;name&quot;)</span></span><br><span class="line">    <span class="comment">// unique name for this build to avoid conflicts with other builds in the same HTML</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;my-config&quot;</span>,</span><br><span class="line">    <span class="comment">// name of the configuration, shown in output</span></span><br><span class="line">    <span class="comment">/* 高级输出配置（点击显示） */</span></span><br><span class="line">    <span class="comment">/* Expert output configuration 1 (on own risk) */</span></span><br><span class="line">    <span class="comment">/* Expert output configuration 2 (on own risk) */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 模块配置相关</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 模块规则（配置 loader、解析器等选项）</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Conditions:</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        <span class="attr">include</span>: [</span><br><span class="line">          path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">exclude</span>: [</span><br><span class="line">          path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app/demo-files&quot;</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// these are matching conditions, each accepting a regular expression or string</span></span><br><span class="line">        <span class="comment">// test and include have the same behavior, both must be matched</span></span><br><span class="line">        <span class="comment">// exclude must not be matched (takes preferrence over test and include)</span></span><br><span class="line">        <span class="comment">// Best practices:</span></span><br><span class="line">        <span class="comment">// - Use RegExp only in test and for filename matching</span></span><br><span class="line">        <span class="comment">// - Use arrays of absolute paths in include and exclude to match the full path</span></span><br><span class="line">        <span class="comment">// - Try to avoid exclude and prefer include</span></span><br><span class="line">        <span class="comment">// Each condition can also receive an object with &quot;and&quot;, &quot;or&quot; or &quot;not&quot; properties</span></span><br><span class="line">        <span class="comment">// which are an array of conditions.</span></span><br><span class="line">        <span class="attr">issuer</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">issuer</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>),</span><br><span class="line">        <span class="attr">issuer</span>: &#123; <span class="attr">and</span>: [ <span class="regexp">/\.css$/</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>) ] &#125;,</span><br><span class="line">        <span class="attr">issuer</span>: &#123; <span class="attr">or</span>: [ <span class="regexp">/\.css$/</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>) ] &#125;,</span><br><span class="line">        <span class="attr">issuer</span>: &#123; <span class="attr">not</span>: [ <span class="regexp">/\.css$/</span> ] &#125;,</span><br><span class="line">        <span class="attr">issuer</span>: [ <span class="regexp">/\.css$/</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>) ], <span class="comment">// like &quot;or&quot;</span></span><br><span class="line">        <span class="comment">// conditions for the issuer (the origin of the import)</span></span><br><span class="line">        <span class="comment">/* Advanced conditions (click to show) */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Actions:</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="comment">// 应该应用的 loader，它相对上下文解析</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&quot;es2015&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// options for the loader</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// apply multiple loaders and options instead</span></span><br><span class="line">          <span class="string">&quot;htmllint-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;html-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;javascript/auto&quot;</span>,</span><br><span class="line">        <span class="comment">// specifies the module type</span></span><br><span class="line">        <span class="comment">/* Advanced actions (click to show) */</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          <span class="comment">// ... (rules)</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">// only use one of these nested rules</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// ... (conditions)</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">          <span class="comment">// ... (rules)</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">// use all of these nested rules (combine with conditions to be useful)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">/* 高级模块配置（点击展示） */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// options for resolving module requests</span></span><br><span class="line">    <span class="comment">// (does not apply to resolving of loaders)</span></span><br><span class="line">    <span class="attr">modules</span>: [<span class="string">&quot;node_modules&quot;</span>,path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>)],</span><br><span class="line">    <span class="comment">// directories where to look for modules (in order)</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.css&quot;</span>],</span><br><span class="line">    <span class="comment">// 使用的扩展名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="comment">// a list of module name aliases</span></span><br><span class="line">      <span class="comment">// aliases are imported relative to the current context</span></span><br><span class="line">      <span class="string">&quot;module&quot;</span>: <span class="string">&quot;new-module&quot;</span>,</span><br><span class="line">      <span class="comment">// 别名：&quot;module&quot; -&gt; &quot;new-module&quot; 和 &quot;module/path/file&quot; -&gt; &quot;new-module/path/file&quot;</span></span><br><span class="line">      <span class="string">&quot;only-module$&quot;</span>: <span class="string">&quot;new-module&quot;</span>,</span><br><span class="line">      <span class="comment">// 别名 &quot;only-module&quot; -&gt; &quot;new-module&quot;，但不匹配 &quot;only-module/path/file&quot; -&gt; &quot;new-module/path/file&quot;</span></span><br><span class="line">      <span class="string">&quot;module&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app/third/module.js&quot;</span>),</span><br><span class="line">      <span class="comment">// alias &quot;module&quot; -&gt; &quot;./app/third/module.js&quot; and &quot;module/file&quot; results in error</span></span><br><span class="line">      <span class="string">&quot;module&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app/third&quot;</span>),</span><br><span class="line">      <span class="comment">// alias &quot;module&quot; -&gt; &quot;./app/third&quot; and &quot;module/file&quot; -&gt; &quot;./app/third/file&quot;</span></span><br><span class="line">      [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app/module.js&quot;</span>)]: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app/alternative-module.js&quot;</span>),</span><br><span class="line">      <span class="comment">// alias &quot;./app/module.js&quot; -&gt; &quot;./app/alternative-module.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 可供选择的别名语法（点击展示） */</span></span><br><span class="line">    <span class="comment">/* 高级解析选项（点击展示） */</span></span><br><span class="line">    <span class="comment">/* Expert resolve configuration (click to show) */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">performance</span>: &#123;</span><br><span class="line">    <span class="attr">hints</span>: <span class="string">&quot;warning&quot;</span>, <span class="comment">// 枚举</span></span><br><span class="line">    <span class="attr">maxAssetSize</span>: <span class="number">200000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    <span class="attr">maxEntrypointSize</span>: <span class="number">400000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    <span class="attr">assetFilter</span>: <span class="keyword">function</span>(<span class="params">assetFilename</span>) &#123;</span><br><span class="line">      <span class="comment">// 提供资源文件名的断言函数</span></span><br><span class="line">      <span class="keyword">return</span> assetFilename.<span class="title function_">endsWith</span>(<span class="string">&#x27;.css&#x27;</span>) || assetFilename.<span class="title function_">endsWith</span>(<span class="string">&#x27;.js&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// enum</span></span><br><span class="line">  <span class="comment">// 通过为浏览器调试工具提供极其详细的源映射的元信息来增强调试能力，</span></span><br><span class="line">  <span class="comment">// 但会牺牲构建速度。</span></span><br><span class="line">  <span class="attr">context</span>: __dirname, <span class="comment">// string（绝对路径！）</span></span><br><span class="line">  <span class="comment">// webpack 的主目录</span></span><br><span class="line">  <span class="comment">// entry 和 module.rules.loader 选项</span></span><br><span class="line">  <span class="comment">// 都相对于此目录解析</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 枚举</span></span><br><span class="line">  <span class="comment">// the environment in which the bundle should run</span></span><br><span class="line">  <span class="comment">// changes chunk loading behavior, available external modules</span></span><br><span class="line">  <span class="comment">// and generated code style</span></span><br><span class="line">  <span class="attr">externals</span>: [<span class="string">&quot;react&quot;</span>, <span class="regexp">/^@angular/</span>],</span><br><span class="line">  <span class="comment">// Don&#x27;t follow/bundle these modules, but request them at runtime from the environment</span></span><br><span class="line">  <span class="attr">externalsType</span>: <span class="string">&quot;var&quot;</span>, <span class="comment">// (defaults to output.library.type)</span></span><br><span class="line">  <span class="comment">// Type of externals, when not specified inline in externals</span></span><br><span class="line">  <span class="attr">externalsPresets</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// presets of externals</span></span><br><span class="line">  <span class="attr">ignoreWarnings</span>: [<span class="regexp">/warning/</span>],</span><br><span class="line">  <span class="attr">stats</span>: <span class="string">&quot;errors-only&quot;</span>,</span><br><span class="line">  <span class="attr">stats</span>: &#123;</span><br><span class="line">    <span class="comment">// lets you precisely control what bundle information gets displayed</span></span><br><span class="line">    <span class="attr">preset</span>: <span class="string">&quot;errors-only&quot;</span>,</span><br><span class="line">    <span class="comment">// A stats preset</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advanced global settings (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">env</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// include value of --env in the output</span></span><br><span class="line">    <span class="attr">outputPath</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// include absolute output path in the output</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// include public path in the output</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">assets</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show list of assets in output</span></span><br><span class="line">    <span class="comment">/* Advanced assets settings (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">entrypoints</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show entrypoints list</span></span><br><span class="line">    <span class="attr">chunkGroups</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show named chunk group list</span></span><br><span class="line">    <span class="comment">/* Advanced chunk group settings (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">chunks</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show list of chunks in output</span></span><br><span class="line">    <span class="comment">/* Advanced chunk group settings (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show list of modules in output</span></span><br><span class="line">    <span class="comment">/* Advanced module settings (click to show) */</span></span><br><span class="line">    <span class="comment">/* Expert module settings (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advanced optimization settings (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">children</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show stats for child compilations</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show logging in output</span></span><br><span class="line">    <span class="attr">loggingDebug</span>: <span class="regexp">/webpack/</span>,</span><br><span class="line">    <span class="comment">// show debug type logging for some loggers</span></span><br><span class="line">    <span class="attr">loggingTrace</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show stack traces for warnings and errors in logging output</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">warnings</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show warnings</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show errors</span></span><br><span class="line">    <span class="attr">errorDetails</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show details for errors</span></span><br><span class="line">    <span class="attr">errorStack</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show internal stack trace for errors</span></span><br><span class="line">    <span class="attr">moduleTrace</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show module trace for errors</span></span><br><span class="line">    <span class="comment">// (why was causing module referenced)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">builtAt</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show timestamp in summary</span></span><br><span class="line">    <span class="attr">errorsCount</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show errors count in summary</span></span><br><span class="line">    <span class="attr">warningsCount</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show warnings count in summary</span></span><br><span class="line">    <span class="attr">timings</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show build timing in summary</span></span><br><span class="line">    <span class="attr">version</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show webpack version in summary</span></span><br><span class="line">    <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// show build hash in summary</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123; <span class="comment">// proxy URLs to backend development server</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">static</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>), <span class="comment">// boolean | string | array | object, static file location</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// enable gzip compression</span></span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// true for index.html upon 404, object for multiple paths</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// hot module replacement. Depends on HotModuleReplacementPlugin</span></span><br><span class="line">    <span class="attr">https</span>: <span class="literal">false</span>, <span class="comment">// true for self-signed, object for cert authority</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">experiments</span>: &#123;</span><br><span class="line">    <span class="attr">asyncWebAssembly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// WebAssembly as async module (Proposal)</span></span><br><span class="line">    <span class="attr">syncWebAssembly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// WebAssembly as sync module (deprecated)</span></span><br><span class="line">    <span class="attr">outputModule</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Allow to output ESM</span></span><br><span class="line">    <span class="attr">topLevelAwait</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Allow to use await on module evaluation (Proposal)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// list of additional plugins</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">chunkIds</span>: <span class="string">&quot;size&quot;</span>,</span><br><span class="line">    <span class="comment">// method of generating ids for chunks</span></span><br><span class="line">    <span class="attr">moduleIds</span>: <span class="string">&quot;size&quot;</span>,</span><br><span class="line">    <span class="comment">// method of generating ids for modules</span></span><br><span class="line">    <span class="attr">mangleExports</span>: <span class="string">&quot;size&quot;</span>,</span><br><span class="line">    <span class="comment">// rename export names to shorter names</span></span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// minimize the output files</span></span><br><span class="line">    <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">CssMinimizer</span>(), <span class="string">&quot;...&quot;</span>],</span><br><span class="line">    <span class="comment">// minimizers to use for the output files</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advanced optimizations (click to show) */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="string">&quot;my-name&quot;</span>: &#123;</span><br><span class="line">          <span class="comment">// define groups of modules with specific</span></span><br><span class="line">          <span class="comment">// caching behavior</span></span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.sass$/</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;css/mini-extract&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Advanced selectors (click to show) */</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Advanced effects (click to show) */</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="attr">fallbackCacheGroup</span>: &#123; <span class="comment">/* Advanced (click to show) */</span> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Advanced selectors (click to show) */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Advanced effects (click to show) */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Expert settings (click to show) */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 高级配置（点击展示） */</span></span><br><span class="line">  <span class="comment">/* Advanced caching configuration (click to show) */</span></span><br><span class="line">  <span class="comment">/* Advanced build configuration (click to show) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>html5和css3新特性</title>
    <url>/2022/09/17/html5%E5%92%8Ccss3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3><span id="1-html5新增的一些语义化标签">1. HTMl5新增的一些语义化标签</span></h3><ul>
<li>header标签—定义头部</li>
<li>nav标签—定义导航栏</li>
<li>article标签—定义内容的标签</li>
<li>aside标签—定义侧边栏</li>
<li>section标签—定义文档中的某个区域</li>
</ul>
<p>语义化标签的缺点</p>
<p>兼容性，不兼容ie9及以下，处理方法就是将他们变成块级元素(display:block)，语义化标签在移动端能大量使用，移动端没有兼容的问题</p>
<h3><span id="2-多媒体标签">2. 多媒体标签</span></h3><ul>
<li>video视频标签</li>
<li>音频标签audio</li>
</ul>
<h3><span id="3-input框的类型">3. input框的类型</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type=<span class="string">&quot;email&quot;</span>	<span class="comment">// 限制用户输入必须为Email类型</span></span><br><span class="line">type=<span class="string">&quot;url&quot;</span>	<span class="comment">// 限制用户输入必须为URL类型</span></span><br><span class="line">type=<span class="string">&quot;date&quot;</span>	<span class="comment">// 限制用户输入必须为日期类型</span></span><br><span class="line">type=<span class="string">&quot;time&quot;</span>	<span class="comment">// 限制用户输入必须为时间类型</span></span><br><span class="line">type=<span class="string">&quot;month&quot;</span>	<span class="comment">// 限制用户输入必须为月类型</span></span><br><span class="line">type=<span class="string">&quot;week&quot;</span>	<span class="comment">// 限制用户输入必须为周类型</span></span><br><span class="line">type=<span class="string">&quot;number&quot;</span>	<span class="comment">// 限制用户输入必须为数字类型</span></span><br><span class="line">type=<span class="string">&quot;tel&quot;</span>	<span class="comment">// 手机号码</span></span><br><span class="line">type=<span class="string">&quot;search&quot;</span>	<span class="comment">// 搜索框</span></span><br><span class="line">type=<span class="string">&quot;color&quot;</span>	<span class="comment">//生成一个颜色选择器</span></span><br></pre></td></tr></table></figure>

<h3><span id="4-html5表单元素元素的新属性">4. html5表单元素元素的新属性</span></h3><ul>
<li>required，代表该表单的值未能为空，必填，</li>
<li>placeholder，提示文字，可以通过input::placeholder</li>
<li>autofocus，自动聚焦</li>
<li>autocomplete记录你之前提交成功的内容提示给你</li>
<li>multiple，选择多个文件上传，<input type="file">默认是智能上传一个文件，添加multiple后就能多选了</li>
</ul>
<h3><span id="5-css3新特性">5. css3新特性</span></h3><ul>
<li>属性选择器</li>
<li>伪类选择器</li>
<li>border-radius</li>
<li>过渡动画</li>
<li>scale缩放，transform：scale(n)，宽高都*n</li>
</ul>
<p>background-size</p>
<ol>
<li>contain包含，在图片比例不变的前提下，使任意一边填充整个元素</li>
<li>cover覆盖，图片比例不变，但是完全覆盖元素，移除部分不显示</li>
<li>100% 100%百分比，相对于要填充的元素</li>
<li>px px 规定图片正好多大</li>
</ol>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>js</title>
    <url>/2022/03/09/js/</url>
    <content><![CDATA[<h3><span id="1-事件循环event-loop">1. 事件循环（Event Loop）</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>执行栈查看任务队列有没有任务并执行的过程称为事件循环</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>如同步代码异步代码一起执行的时候，向定时器，点击事件等</p>
<blockquote>
<p>原理</p>
</blockquote>
<p>js 的执行机制是单线程的，做完一件事情再去做下一件事情，当它执行到异步任务时会把异步代码交给执行环境（浏览器&#x2F;node）代执行，然后继续执行执行栈中的同步代码，执行环境中的异步代码准备就绪后会把回调函数放入到任务队列当中，等执行栈中的同步代码执行完毕之后，js 会去任务队列中看有没有准备好的异步代码，如果有就拿回来放入执行队列执行，只要执行完执行栈中的任务就回头去看任务队列（因为时单线程的，如果有多个异步任务就需要执行完一个再回头拿下一个）（一有空就回头看），这样就形成了一个循环</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>不会造成任务堵塞，用户体验好</p>
<h3><span id="2-宏任务和微任务">2. 宏任务和微任务</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>一个事件循环中，异步事件返回结果后会被放到一个任务队列中，但是根据异步的类型有分为宏任务和微任务，宏任务会放入宏任务队列，微任务会放入微任务队列，当执行栈空闲时会回头看微任务队列有没有待执行的微任务，有就执行微任务后面执行宏任务</p>
<ul>
<li>宏任务类型：定时器，script(整体代码)，ui 交互事件</li>
<li>微任务类型：promise.then 和.catch，object.observe…</li>
</ul>
<p>执行顺序：</p>
<ul>
<li>同步任务 &gt; 微任务 &gt; 宏任务 &gt; 微任务</li>
</ul>
<p>延申：</p>
<ul>
<li>网上也有说同步任务也是宏任务的说法，所以也有人说的执行顺序为：宏任务 &gt; 微任务 &gt; 宏任务 &gt; 微任务</li>
</ul>
<h3><span id="3-promise">3. promise</span></h3><ul>
<li><p>概念：promise 是一个构造函数，他有 3 种状态，pedding 等待中，resolved 成功，rejected 失败，状态改变是不可逆的，会返回成功或者失败，还有两个参数（resolve，reject），它的诞生解决了回调地狱的一个问题</p>
</li>
<li><p>回调地狱概念：如果后一个请求需要前一个请求的结果怎么办？这时候就要函数套函数，就形成了回调地狱</p>
</li>
<li><p>promise 原理：把异步代码封装在回调内部，成功的话调用 resolve 把结果返回回来，通过原型上的.then()方法获取这个值，失败调用 reject，用 catch 方法捕获错误。使用上可以一直通过.then 方法的链式调用，使得多层的回调嵌套看起来变成了同一层的，书写上以及理解上会更直观和简洁一些。注意：一直使用.then 需要上一个.then 中 return 出一个新的 promise，并且调用 resolve</p>
</li>
<li><p>应用场景：如果后一个请求需要前一个请求的结果</p>
</li>
<li><p>promise 构造函数是同步的，.then()方法里面的回调函数是异步执行的因为源码中 then 的回调会先被放到成功或者失败的数组中</p>
</li>
<li><p>then 的优点：可以链式写，解决回调地狱</p>
</li>
<li><p>then 的缺点：如果有很多要一直.then 看上去结构还是不够清晰</p>
</li>
<li><p>then 解决方案：async 搭配 await</p>
</li>
<li><p>async，await 概念：诞生主是为了修饰一直.then 造成页面结构不清晰，通过 asnyc 和 await 修饰可以让很多 promise 返回值看上去像同步代码一样，结构清晰，它是 Generator 函数的语法糖。</p>
</li>
<li><p>await 作用：等待异步的代码执行完成后再执行接下来的代码</p>
</li>
<li><p>使用 await 必须搭配 async 使用</p>
</li>
</ul>
<h3><span id="4-promise-的-then-为什么是异步的">4. promise 的 then 为什么是异步的？</span></h3><ul>
<li>因为成功后的 then 会被放进微任务队列：queueMicrotask 中执行</li>
</ul>
<h3><span id="5-promise-获取结果扩展">5. promise 获取结果扩展</span></h3><h6><span id="1-串行方法按照顺序执行的例如then-方法一样">1. 串行方法：按照顺序执行的，例如.then 方法一样，</span></h6><ul>
<li>静态方法：promise.all()，返回结果时机：等 all 里面的 promise 异步全部执行完才返回结果，参数可以传递一个数组，数组中记录的是所有 promise 异步处理，返回的是一个 promise 实例对象，就可以通过.then()接收。接收的值是一个数组，结果是<strong>按照执行顺序</strong>的返回值，缺陷：一旦有一个异步出错调用 reject，就会就入 catch。如果有多个 reject 只返回执行<strong>最快</strong>的一个 promise 的结果</li>
<li>静态方法：promise.allSettled()，返回结果时机：等 all 里面的 promise 异步全部执行完才返回结果，参数可以传递一个数组，数组中记录的是所有 promise 异步处理，返回的是一个 promise 实例对象，就可以通过.then()接收。接收的值是一个数组，结果是<strong>按照执行顺序</strong>的返回值，缺陷：不管成功还是失败，都会打印结果</li>
<li>区别：all()一旦失败就进入 catch。allSettled()不管成功还是失败都会进入.then</li>
</ul>
<h6><span id="2-并行方法同时执行谁先执行完谁先出结果">2. 并行方法：同时执行，谁先执行完谁先出结果</span></h6><ul>
<li>静态方法：promise.any()，返回结果时机：<strong>谁先执行成功返回谁</strong>，参数可以传递一个数组，数组中记录的是所有 promise 异步处理，返回的是一个 promise 实例对象，就可以通过.then()接收，注意：返回的是执行成功的并且还是先执行完的那个 promise 结果。如果全部 promise 返回失败，则会返回一个错误对象（AggregateError）：所有 promise 都为失败</li>
<li>静态方法：promise.race()，返回结果时机：谁先执行完返回谁，<strong>不管成功还是失败</strong>，参数可以传递一个数组，数组中记录的是所有 promise 异步处理，返回的是一个 promise 实例对象，就可以通过.then()接收，注意：不管成功还是失败，只返回执行最快的那一个</li>
<li>区别：any()返回又快又正确的结果。race()不管成功失败，返回执行最快的 promise 结果。<br>这两个不能解决三个异步执行完再执行同步代码这个问题</li>
</ul>
<h3><span id="6-处理异步之-generator-函数">6. 处理异步之 Generator 函数</span></h3><ul>
<li>概念：Generator 函数是 es6 的，作用是可以将函数执行时可以进行暂停。通过 yield 进行暂停</li>
<li>定义：通过 function * 函数名定义。与普通函数多了个*进行区分</li>
<li>调用：直接调用函数名就行，但是不会执行，此时只是得到了一个 Generator 对象，需要调用 Generator 对象的 next 方法逐步执行，注意：需要将 Generator 函数赋值给一个变量。然后多次调用 next（）才会按照顺序执行，不然会一直执行第一个，如果执行完毕最后一次返回的是一个实例，里面有 value：保存 return 出来的值。done：true 代表执行完毕</li>
<li>传参：由里向外：需要传递的参数写在 yield 后面，外面通过调用 next 接收，由外向里：注意：第一次 next 传递参数无效，第一次的 next 的参数由函数调用传递。后面的可以通过 next 传递，接收：通过 yield 的返回值进行接收。第二次调用 next 传递的参数通过第一个 yield 的返回值进行获取。因为第一次 next 不需要传参，通过调用函数传递第一次参数</li>
</ul>
<h3><span id="7-remvwvh">7. rem，vw，vh</span></h3><ol>
<li>rem：核心原理就是 1rem 等于根(html)节点的字体大小,在不同的屏幕下监测不同屏幕的根节点大小达到移动适配效果</li>
</ol>
<h3><span id="8-letvarconst-三者的区别">8. let，var，const 三者的区别</span></h3><blockquote>
<p>区别</p>
</blockquote>
<ul>
<li><p>var：var 的使用存在变量提升，js 默认给其 undefined 值</p>
</li>
<li><p>let，const 生命的变量不存在变量提升，也就是说在生命前使用它都会报错，</p>
</li>
</ul>
<blockquote>
<p>暂时性死区</p>
</blockquote>
<ul>
<li>如果在 let，const 声明前使用变量，这段区域被称为”临时死区”</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 死区开始</span></span><br><span class="line">  value = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="comment">// 死区结束</span></span><br><span class="line">  <span class="keyword">let</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//index.html:55 Uncaught ReferenceError: Cannot access &#x27;value&#x27; before initialization</span></span><br><span class="line"><span class="comment">// 未捕获的ReferenceError:在初始化之前无法访问“value”</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>重复声明</p>
</blockquote>
<ul>
<li>let 和 const 声明的变量不允许重复声明</li>
<li>var 声明的变量可以多次重复声明，但最终变量的值为最后移除声明赋值的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="number">2</span> <span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="number">3</span> <span class="keyword">var</span> a = <span class="string">&#x27;last value&#x27;</span>;</span><br><span class="line"><span class="number">4</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// last value</span></span><br></pre></td></tr></table></figure>

<ul>
<li>varfor 循环中最后打印的结果是同一个值，解决办法就是 var 替换成 let，利用闭包</li>
</ul>
<blockquote>
<p>const 常量</p>
</blockquote>
<ul>
<li><code>const</code>声明的作用是：创建一个只读的常量，一旦声明不可改变</li>
<li>和<code>let</code>声明一样，const 声明的常量无法提升，也存在临时死区</li>
<li>和<code>let</code>不同的是，const 声明后必须赋值，否则会报错</li>
</ul>
<h3><span id="9-callapplybind-底层怎么实现的">9. call,apply,bind 底层怎么实现的</span></h3><ol>
<li>call 函数实现</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ltCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">//判断传递的thisArg是否为null或undefind</span></span><br><span class="line">  thisArg = thisArg ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">//定义一个symbol变量，防止thisArg上有相同属性名</span></span><br><span class="line">  <span class="keyword">var</span> symbol = <span class="title class_">Symbol</span>();</span><br><span class="line">  <span class="comment">//给thisArg添加一个symbol属性</span></span><br><span class="line">  thisArg[symbol] = fn;</span><br><span class="line">  <span class="comment">//判断arr是否为空</span></span><br><span class="line">  arr = arr ? arr : [];</span><br><span class="line">  <span class="comment">//获取对象上的symbol属性</span></span><br><span class="line">  <span class="keyword">var</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(thisArg);</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">of</span> symbols) &#123;</span><br><span class="line">    <span class="comment">//通过隐式调用将this指向thisArg</span></span><br><span class="line">    result = thisArg[key](...arr);</span><br><span class="line">    <span class="comment">//函数调用完，删除fn属性</span></span><br><span class="line">    <span class="keyword">delete</span> thisArg[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>apply 函数实现</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ltapply</span> = <span class="keyword">function</span> (<span class="params">thisArg, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  thisArg = thisArg ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span>;</span><br><span class="line">  thisArg.<span class="property">fn</span> = fn;</span><br><span class="line">  <span class="comment">//定义一个symbol变量,防止thisArg上有相同属性名</span></span><br><span class="line">  <span class="keyword">var</span> symbol = <span class="title class_">Symbol</span>();</span><br><span class="line">  <span class="comment">//给thisArg添加一个symbol属性</span></span><br><span class="line">  thisArg[symbol] = fn;</span><br><span class="line">  <span class="comment">//判断arr是否为空</span></span><br><span class="line">  arr = arr ? arr : [];</span><br><span class="line">  <span class="comment">//获取对象上的symbol属性</span></span><br><span class="line">  <span class="keyword">var</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(thisArg);</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">of</span> symbols) &#123;</span><br><span class="line">    <span class="comment">//通过隐式调用将this指向thisArg</span></span><br><span class="line">    result = thisArg[key](...arr);</span><br><span class="line">    <span class="comment">//函数调用完，删除fn属性</span></span><br><span class="line">    <span class="keyword">delete</span> thisArg[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>bind 函数实现</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ltbind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  thisArg = thisArg ? <span class="title class_">Object</span>(thisArg) : <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">//定义一个symbol变量,防止thisArg上有相同属性名</span></span><br><span class="line">  <span class="keyword">var</span> symbol = <span class="title class_">Symbol</span>();</span><br><span class="line">  <span class="comment">//给thisArg添加一个symbol属性</span></span><br><span class="line">  thisArg[symbol] = fn;</span><br><span class="line">  arr = arr ? arr : [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">proxyFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">//获取到thisArg上的所有symbol属性</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(thisArg);</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">of</span> symbols) &#123;</span><br><span class="line">      <span class="comment">//通过隐式调用将this指向thisArg</span></span><br><span class="line">      result = thisArg[key](...arr);</span><br><span class="line">      <span class="comment">//函数调用完，删除fn属性</span></span><br><span class="line">      <span class="keyword">delete</span> thisArg[key];</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> proxyFn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3><span id="10-柯里化函数">10. 柯里化函数</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通的add函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Currying后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curryingAdd</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">curryingAdd</span>(<span class="number">1</span>)(<span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3><span id="11-数组去重的几种方法">11. 数组去重的几种方法</span></h3><ol>
<li><p>indexOf()去重，数组的 indexOf()方法可以返回某个指定的元素在数组中首次出现的位置，该方法首先定义一个空的数组 res，然后调用 indexOf 方法对原来的数组进行遍历判断，如果 res.indexOf( item )返回值是-1，将 res.push( item )，最后返回去重之后的 res 数组即可</p>
</li>
<li><p>相邻的数组元素去重，这种方法首先调用了数组的 sort()，然后根据排序后的结果进行遍历及相邻元素对比，如果相对跳过该元素，直到遍历结束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">noReuse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;type error!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  arr = arr.<span class="title function_">sort</span>();</span><br><span class="line">  <span class="keyword">let</span> res = [arr[<span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arr[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">&quot; a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">noReuse</span>(arr)); <span class="comment">//  [1, 3, 5, 7, 9, &#x27;a&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象属性去重，遍历数组，将数组中的值设置未对象的属性，并给该属性赋予初始值 1，没出现一次对应的属性值+1，这样，数组值对应的就是该元素出现的次数了，对象中，若无 arr[i]属性，则数组 push，obj 添加 arr[i]属性</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">noReuse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;type error!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = [],</span><br><span class="line">    obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="title function_">noReuse</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">noReuse</span>(arr)); <span class="comment">//[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>set 与结构赋值去重（推荐使用），ES6 中新增了数据类型 set，set 的一个最大的特点就是数据不重复，set 函数可以接受一个数组（或类数组对象）作为参数来 初始化，利用该特性也可以做到给数组去重</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">set = [...set];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>set 与 Array.from(推荐，遍历，快速)，将类数组可枚举对象转换为真正的数组可使用 Array.from()方法，是 Array ES6 新增的方法，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值返回的数组 :smile::smile::smile::smile::smile:五星推荐，两行代码搞定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b]</span></span><br><span class="line"><span class="string">console.log(Array.from(new Set(arr)));  // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Array.Prototype.reduce()方法实现去重，reduce 方法参数是空数组和 arr 数组的项，利用 includes 实现查找项是否存在并返回布尔值的特点实现去重</p>
</li>
</ol>
<h3><span id="12-数组合并的几种方法">12. 数组合并的几种方法</span></h3><ol>
<li>push（添加到数组的末尾，改变原数组）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> temparr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">temparr.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temparr); <span class="comment">// [1,3,5,7,9,0]</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>concat(不改变原数组，concat 合并数组之后，<strong>返回值才是新数组</strong>，并且可以合并两个及其以上的数组）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.<span class="title function_">concat</span>([<span class="number">5</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[1, 3, 5, 7]</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>利用循环，for 循环也好，forEach 循环也行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>];</span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> arr1.<span class="title function_">push</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 1, 3, 5, 7, 9, 0]</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>ES6 拓展运算符 :smile:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[1, 3, 5, 7, 9, 0]</span></span><br></pre></td></tr></table></figure>

<h3><span id="13-手写深拷贝">13. 手写深拷贝</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCope</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        newObj[key] = <span class="title function_">deepCope</span>(obj[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newObj[key] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">deepCope</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;name: &#x27;张三&#x27;, age: 20&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === obj1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3><span id="14-01-02-x3dx3d-03">14. 0.1 + .02 !&#x3D;&#x3D; 0.3</span></h3><p>存储位不够导致的精度丢失，0.1 表示为<code>0.0001100110011001...</code>，而 0.2 表示为<code>0.0011001100110011...</code>，而在二进制中 1 + 1 &#x3D; 10，所以 0.1 + 0.2 &#x3D; <code>0.0100110011001100...</code>，转成 10 进制就近似表示为 <code>0.30000000000000004</code></p>
<p>简单来说就是，浮点数转成二进制时丢失了精度，因此在二进制计算完再转回十进制时可能会和理论结果不同</p>
<h3><span id="15-最大安全整数">15. 最大安全整数</span></h3><p>2^53 - 1，Number.MAX_SAFE_INTEGER</p>
<h3><span id="16-深拷贝的方式">16. 深拷贝的方式</span></h3><ol>
<li>JSON 方式，序列化与反序列化</li>
</ol>
<ul>
<li>如果 json 中有 function 或者 undefined 会造成数据丢失</li>
<li>如果是带有正则或者是错误对象，在序列化之后会变为空对象</li>
<li>如果 json 里有 NaN，infinity 和-infinity，序列化的结果会变 null</li>
</ul>
<ol start="2">
<li>递归深拷贝</li>
<li>lodash 第三方库，cloneDeep</li>
</ol>
<h3><span id="17-构造函数原型和实例的关系">17. 构造函数，原型和实例的关系</span></h3><p>实例对象是通过构造函数 new 出来的，在 new 的过程中实例对象的<code>__proto__</code>指向构造函数的<code>prototype</code>，然后原型对象可以通过 constructor 指向构造函数，包括实例对象在使用方法的时候会在自身查找，如果没有的话会顺着原型链的关系往上去寻找，直到找到顶级对象<code>Object</code>，由于顶级对象并没有其原型所以再往上会指向<code>null</code></p>
<h3><span id="18-new-的过程">18. new 的过程</span></h3><ol>
<li>会创建一个空的对象</li>
<li>会将构造函数中的 this 指向所创建的对象</li>
<li>通过 this 给实例对象添加属性和方法</li>
<li>默认 return 返回该对象</li>
</ol>
<h3><span id="19-es6-模块化和-commonjs-模块化的区别">19. es6 模块化和 commonjs 模块化的区别</span></h3><ol>
<li>引入方式的不同，commonjs 引入方式是通过 requert 引入，然后 es6 模块化是通过 import 进行引入</li>
<li>导出的方式不同，commonjs 导出采用 module.exports 导出，然后 es6 模块化通过 export 默认或者按需导出</li>
</ol>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2022/03/09/vue/</url>
    <content><![CDATA[<h3><span id="01-computed和watch的区别">01. computed和watch的区别</span></h3><p>计算属性和watch实际上都有监听属性变化的能力。只不过计算属性可以当做Vue实例上的响应式数据使用，会自动监听计算属性函数调用到的响应式数据的变更，并且会返回计算属性函数的返回值；watcher是显式的为要监听的数据创建一个Watcher监听数据变更，不能作为vue实例上的响应式数据值使用</p>
<h3><span id="02-vue对象新增属性的方法">02. vue对象新增属性的方法</span></h3><ol>
<li>传统方式</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userInfo.userName&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userInfo.userAge&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;showUserAge&quot;&gt;显示年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;increaseUserAge&quot;&gt;增加年龄&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        userInfo: &#123;</span><br><span class="line">          userName: &#x27;test&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showUserAge() &#123;</span><br><span class="line">        this.userInfo.userAge = 18; //传统的添加属性的方法</span><br><span class="line">        console.log(this.userInfo);</span><br><span class="line">      &#125;,</span><br><span class="line">      increaseUserAge() &#123;</span><br><span class="line">        this.userInfo.userAge++;</span><br><span class="line">        console.log(this.userInfo);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 this.$set(object,key,value)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">     <span class="title function_">showUserAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">//this.userInfo.userAge = 18;</span></span><br><span class="line">       <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">userInfo</span>, <span class="string">&#x27;userAge&#x27;</span>, <span class="number">18</span>);  <span class="comment">//使用this.$set(object,key,value)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="title function_">increaseUserAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userInfo</span>.<span class="property">userAge</span>++;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3><span id="3-keep-alive原理">3. keep-alive原理</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>keep-alive是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中；使用keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>用户在某个列表页面选择筛选条件过滤出一份数据列表，由列表页面进入数据详情页面，再返回该列表页面，我们希望：列表页面可以保留用户的筛选（或选中）状态。keep-alive就是用来解决这种场景。当然keep-alive不仅仅是能够保存页面&#x2F;组件的状态这么简单，它还可以避免组件反复创建和渲染，有效提升系统性能。 总的来说，keep-alive用于保存组件的渲染状态。</p>
<blockquote>
<p>用法</p>
</blockquote>
<ol>
<li>在动态组件中的应用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;whiteList&quot;</span> <span class="attr">:exclude</span>=<span class="string">&quot;blackList&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;amount&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在vue-router中的应用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;whiteList&quot;</span> <span class="attr">:exclude</span>=<span class="string">&quot;blackList&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;amount&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>include</code>定义缓存白名单，keep-alive会缓存命中的组件；<code>exclude</code>定义缓存黑名单，被命中的组件将不会被缓存；<code>max</code>定义缓存组件上限，超出上限使用<a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/LRU">LRU的策略</a>置换缓存数据。</p>
<blockquote>
<p>部分源码 由于太多懒得搬运</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/core/components/keep-alive.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">  <span class="attr">abstract</span>: <span class="literal">true</span>, <span class="comment">// 判断当前组件虚拟dom是否渲染成真是dom的关键</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: patternTypes, <span class="comment">// 缓存白名单</span></span><br><span class="line">    <span class="attr">exclude</span>: patternTypes, <span class="comment">// 缓存黑名单</span></span><br><span class="line">    <span class="attr">max</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>] <span class="comment">// 缓存的组件实例数量上限</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="4-nexttick原理">4. nextTick原理</span></h3><blockquote>
<p>为什么会有nextTick这个东西的存在?</p>
</blockquote>
<ul>
<li>因为 vue 采用的<strong>异步更新策略</strong>，当监听到数据发生变化的时候不会立即去更新DOM，<br> 而是开启一个任务队列，并缓存在同一事件循环中发生的所有数据变更;<br> 这种做法带来的好处就是可以将多次数据更新合并成一次，减少操作DOM的次数，<br> 如果不采用这种方法，假设数据改变100次就要去更新100次DOM，而频繁的DOM更新是很耗性能的；</li>
</ul>
<blockquote>
<p>nextTick的作用</p>
</blockquote>
<ul>
<li>nextTick 接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后才执行；<br><strong>使用场景</strong>：想要操作 <em>基于最新数据生成的DOM</em> 时，就将这个操作放在 nextTick 的回调中；</li>
</ul>
<blockquote>
<p>nextTick实现原理</p>
</blockquote>
<ul>
<li>将传入的回调函数包装成异步任务，异步任务又分微任务和宏任务，为了尽快执行所以优先选择微任务；</li>
<li>nextTick 提供了四种异步方法 Promise.then、MutationObserver、setImmediate、setTimeout(fn,0)</li>
</ul>
<h3><span id="05-发布订阅模式">05.  发布订阅模式</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>发布-订阅模式其实就是一种对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到状态改变的通知，多方订阅 &gt; 一方发布，订阅方会收到通知</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EvtBus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listenEvent</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  $on = <span class="keyword">function</span> (<span class="params">eventKey, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listenEvent</span>[eventKey]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listenEvent</span>[eventKey] = [callback];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listenEvent</span>[eventKey].<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">listenEvent</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  $emit = <span class="keyword">function</span> (<span class="params">eventKey, payload</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listenEvent</span>[eventKey].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">item</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EvtBus</span>();</span><br><span class="line"><span class="comment">// $on 事件注册第一个参数是事件名，第二个参数是回调函数</span></span><br><span class="line">eventBus.$on(<span class="string">&quot;getName&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老板名字叫张三&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">eventBus.$on(<span class="string">&quot;getName&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老板名字叫李四&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">eventBus.$on(<span class="string">&quot;getName&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老板名字叫王五&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">eventBus.$on(<span class="string">&quot;getAge&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;永远80岁&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">eventBus.$emit(<span class="string">&quot;getName&quot;</span>, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3><span id="06-虚拟dom">06.  虚拟dom</span></h3><ol>
<li>虚拟dom本质就是一个js对象，用来描述真正的dom是什么样子的，这个对象就是虚拟dom</li>
<li>虚拟dom可以高效的更新页面，同时可以使用虚拟dom进行跨平台</li>
<li>初始化渲染的适合，会根据数据和模板生成一份虚拟dom树，当数据发生变化，会根据新的数据和模板生成新的虚拟dom树，这时候就出现了两颗虚拟dom，然后通过diff算法对这两颗虚拟dom进行比较</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">type</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">props</span>:&#123; <span class="attr">id</span>:<span class="string">&#x27;box&#x27;</span>,<span class="attr">class</span>:<span class="string">&#x27;main-box&#x27;</span>&#125;,<span class="attr">children</span>:[&#123;... &#125;] &#125;</span><br></pre></td></tr></table></figure>

<h3><span id="07-编程式导航和声明式导航">07. 编程式导航和声明式导航</span></h3><ul>
<li>编程式，router.push，以jsAPI式跳转</li>
<li>声明式，router-link，标签式跳转</li>
</ul>
<h3><span id="08-路由守卫">08. 路由守卫</span></h3><p>vue-router全局有三个守卫</p>
<ol>
<li>router.beforeEach全局前置守卫，在进入路由前触发</li>
<li>router.beforeResolve全局解析守卫（2.5.0）在beforeRouteEnter调用之后调用</li>
<li>router.afterEach全局后置钩子，进入路由之后触发</li>
</ol>
<p><strong>使用方法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局解析守卫</span></span><br><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach 全局后置钩子&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>路由独享守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="comment">// 参数用法什么的都一样,调用顺序在全局前置守卫后面，所以不会被全局守卫覆盖</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>路由组件内的守卫</p>
<ol>
<li>beforeRouteEnter进入路由前</li>
<li>beforeRouteUptate路由复用同一个组件时</li>
<li>beforeRouterLeave离开当前路由时</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在路由独享守卫后调用 不！能！获取组件实例 `this`，组件实例还没被创建</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">  <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用，可以访问组件实例 `this`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>beforeRouteEnter访问this</strong></p>
<p>因为钩子在组件实例还没被创建的时候调用，所以不能获取组件实例 <code>this</code>，可以通过传一个回调给<code>next</code>来访问组件实例 。</p>
<p>但是<strong>回调的执行时机在mounted后面</strong>,所以在我看来这里对this的访问意义不太大，可以放在<code>created</code>或者<code>mounted</code>里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在路由独享守卫后调用&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例`this` 执行回调的时机在mounted后面，</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>beforeRouteLeave：</strong></p>
<p>导航离开该组件的对应路由时调用，我们用它来禁止用户离开，比如还未保存草稿，或者在用户离开前，将<code>setInterval</code>销毁，防止离开之后，定时器还在调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span> , next) &#123;</span><br><span class="line">  <span class="keyword">if</span> (文章保存) &#123;</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">// 允许离开或者可以跳到别的路由 上面讲过了</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="literal">false</span>); <span class="comment">// 取消离开</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="09-keep-alive">09. keep-alive</span></h3><p>应用场景:使用keep-alive可以将所有路径匹配到的路由组件都缓存起来，包括路由组件里面的组件，keep-alive大多数使用场景就是这种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<p>生命周期钩子</p>
<ol>
<li>activeted</li>
</ol>
<p>activeted在组件第一次渲染时会被调用，之后在<code>每次缓存组件被激活时调用</code></p>
<ol start="2">
<li>deactiveted：组件被停用<code>离开路由</code>时调用</li>
</ol>
<p>匹配规则</p>
<ol>
<li>首先匹配组件的name选项</li>
<li>匹配它的局部注册名称（父组件<code>compoments</code>选项的键值）</li>
<li>匿名组件不匹配</li>
<li>如果路由组件没有<code>name</code>选项，并且没有注册的组件名，只能匹配当前被包裹的组件，不能匹配更下面嵌套的子组件</li>
<li><keep-alive>不会再函数式组件中正常使用，因为他们没有缓存实例</keep-alive></li>
<li><code>exclude</code>的优先级大于<code>include</code>，也就是说两者同存的情况下<code>exclude生效</code>，<code>include不生效</code>，当组件被exclude匹配，则改组件不会被缓存，所以不会调用<code>activatde</code>和<code>deactivated</code></li>
</ol>
<h3><span id="09-vue响应式原理">09. vue响应式原理</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj,key,val</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="params">obj,key,val</span>) &#123;</span><br><span class="line">        <span class="attr">enumerable</span>:<span class="literal">true</span>,	<span class="comment">// 可枚举</span></span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,	<span class="comment">// 可以被配置比如delete</span></span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你正在试图访问obj的a属性&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你试图改变obj的a属性&quot;</span>,newValue);</span><br><span class="line">            <span class="keyword">if</span>(val === newValue) <span class="keyword">return</span></span><br><span class="line">            val = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="10-vue-watch的数组写法">10. vue watch的数组写法</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;		<span class="comment">// 注意不可以使用箭头函数</span></span><br><span class="line">	<span class="attr">msg</span>:[	<span class="comment">// 监听一个属性 触发多个逻辑 </span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">234</span>) &#125;</span><br><span class="line">	]，</span><br><span class="line"><span class="comment">// 对象监听</span></span><br><span class="line">    <span class="string">&quot;obj.a&quot;</span> : [	</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">234</span>) &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器</title>
    <url>/2022/03/11/%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<h3><span id="01-三次握手四次挥手">01. 三次握手，四次挥手</span></h3><p>客户端和服务器之间建立连接需要经过<strong>三次确认</strong>的阶段，我们称之为<code>TCP</code>的三次握手 </p>
<ul>
<li>三次握手</li>
</ul>
<ol>
<li>第一次握手：客户端发送一个<code>syn</code>报文，设置发送序号为<code>X</code>，客户端进入<code>SYN_SENT</code>状态，等待服务器回应。</li>
<li>第二次握手：服务端收到<code>syn</code>报文，但是服务端必须确定客户端的<code>syn(ack= X + 1)</code>, 因此服务端也要发送一个<code>syn=Y</code>给客户端进行确认，表示服务端已经收到客户端的请求。服务端需要发送<code>ack+syn</code>给客户端，此时服务器进入<code>SYN_RECV</code>状态</li>
<li>第三次握手：客户端收到服务器的<code>syn+ack</code>包，向服务器发送确认包<code>ack(ack=Y+1）</code>，此包发送完毕，客户端和服务器进入<code>ESTABLISHED</code>（<code>TCP</code>连接成功）状态，完成三次握手。</li>
</ol>
<ul>
<li>四次挥手</li>
</ul>
<ol>
<li><code>TCP</code>客户端发送一个<code>FIN</code>，用来关闭客户到服务器的数据传送。</li>
<li>服务器收到这个<code>FIN</code>，它发回一个<code>ACK</code>，确认序号为收到的序号加1。和<code>SYN</code>一样，一个<code>FIN</code>将占用一个序号。</li>
<li>服务器关闭客户端的连接，发送一个<code>FIN</code>给客户端。</li>
<li>客户端发回<code>ACK</code>报文确认，并将确认序号设置为收到序号加1。</li>
</ol>
<h3><span id="02-cookie-localstorage和sessionstorage-三者之间的区别以及存储-获取-删除等使用方式">02. cookie、localStorage和sessionStorage 三者之间的区别以及存储、获取、删除等使用方式</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>前端开发的时候，在网页刷新的时候，所有数据都会被清空，这时候就要用到本地存储的技术，前端本地存储的方式有三种，分别是cookie，localstorage和sessionStorage ，这是大家都知道的。</p>
<blockquote>
<p>使用方式</p>
</blockquote>
<ol>
<li><p>cookie</p>
</li>
<li><p>localStorage 和 sessionStorage<strong>所使用的方法是一样的</strong>，下面以sessionStorage为栗子： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(name,num);<span class="comment">//存储数据</span></span><br><span class="line"><span class="keyword">let</span> dataAll = sessionStorage.<span class="title function_">valueOf</span>();<span class="comment">//获取全部数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dataAll,<span class="string">&#x27;获取全部数据&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> dataSession = sessionStorage.<span class="title function_">getItem</span>(name);<span class="comment">//获取指定键名数据</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(name); <span class="comment">//删除指定键名数据</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();<span class="comment">//清空缓存数据：localStorage.clear();</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>生命周期</p>
</blockquote>
</li>
<li><p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效。</p>
</li>
<li><p>localStorage：除非被手动清除，否则将会永久保存。</p>
</li>
<li><p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p>
</li>
</ol>
<blockquote>
<p>存放数据大小：</p>
</blockquote>
<ol>
<li>cookie：4KB左右</li>
<li>localStorage和sessionStorage：可以保存5MB的信息。</li>
</ol>
<blockquote>
<p> http请求：</p>
</blockquote>
<ol>
<li>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</li>
<li>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</li>
</ol>
<blockquote>
<p>易用性</p>
</blockquote>
<ol>
<li>cookie：需要程序员自己封装，源生的Cookie接口不友好</li>
<li>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</li>
</ol>
<blockquote>
<p>应用场景</p>
</blockquote>
<ol>
<li>从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。</li>
<li>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</li>
<li>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来跨页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</li>
</ol>
<h3><span id="03-怎么解决跨域">03. 怎么解决跨域</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>CORS全称</strong>Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者同域名不同端口的资源时，就会发出跨域请求。如果此时另一个资源不允许其进行跨域资源访问，那么访问就会遇到跨域问题。简单来说就是只要协议，域名，端口有一个不同就会出现跨域问题。</p>
<ol>
<li><strong>跨域方案之CORS</strong></li>
</ol>
<ul>
<li>通过服务器设置一系列响应头来实现跨域</li>
<li>第三方模块CORS来解决跨域问题</li>
<li>下载安装CORS：npm install cors</li>
<li>加载cors: const cors &#x3D; require(“cors”)</li>
<li>注册为中间件：app.use(cors())</li>
<li>中间件需要注册在其他中间件之前</li>
</ul>
<ol start="2">
<li><strong>跨域方案之JSONP</strong></li>
</ol>
<ul>
<li>JSONP方案之支持GET请求</li>
<li>JSONP没有浏览器兼容问题，任何浏览器都支持</li>
<li>HTML标签的src属性，不受跨域访问的影响，没有跨域问题</li>
<li>JSONP的实现：</li>
<li>客户端先准备一个函数，比如 abc，并且设置好形参，准备接收响应数据客户端通过script标签的src属性，向接口发送请求，并传递 callback&#x3D;abc 参数服务端响应一个字符串 abc({ “status”: 0, “message”: “登录成功” })客户端将服务器返回的字符串当做JS代码解释，从而实现跨域</li>
</ul>
<ol start="3">
<li>跨域问题之本地服务器代理</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">	<span class="attr">proxy</span>: &#123;</span><br><span class="line">		<span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">			<span class="attr">target</span>: <span class="string">&#x27;接口url地址&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="3-http常见的状态码有哪些">3. http常见的状态码有哪些</span></h3><blockquote>
<p>概念</p>
</blockquote>
<p>HTTP 状态码是服务器端返回给客户端的响应状态码，根据（HTTP）状态码我们就能知道服务器端想要给客户端表达的具体含义，比如 200 就表示请求访问成功，500 就表示服务器端程序出错等。</p>
<p>HTTP 状态码可分为 5 大类：</p>
<ul>
<li>1XX：消息状态码</li>
<li>2XX：成功状态码</li>
<li>3XX：重定向状态码</li>
<li>4XX：客户端错误状态码</li>
<li>5XX：服务端错误状态码</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>HTTP 状态码分为 5 大类：1XX：表示消息状态码；2XX：表示成功状态码；3XX：表示重定向状态码；4XX：表示客户端错误状态码；5XX：表示服务端错误状态码。其中常见的具体状态码有：200：请求成功；301：永久重定向；302：临时重定向；303：查看其它地址；304：所请求的资源未修改，不返回任何资源，请走浏览器缓存。404：无法找到此页面；405：请求的方法类型不支持；500：服务器内部出错。</p>
<h3><span id="4-地址栏输入url的过程">4. 地址栏输入url的过程</span></h3><ol>
<li>url解析：是合法url还是搜索关键词</li>
<li>dns解析：本地&#x2F;dns服务器，把url地址解析成IP地址的过程就是DNS解析</li>
<li>TCP连接：通过ip地址&#x2F;3次握手</li>
</ol>
<ul>
<li>服务端确认了客户端发送能力，和服务端自己的接受能力</li>
<li>客户端确认了服务端的发送能力和接收能力，此时服务端还不知道客户端的接受能力</li>
<li>服务端确认了客户端的接收能力，开始进行连接</li>
</ul>
<ol start="4">
<li>发送http请求</li>
<li>响应请求</li>
<li>页面渲染，html生成dom树，style生成css规则树，dom树和css规则树生成render树，render树进行layout（谷歌重排）&#x2F;reflow（火狐回流），render树上的paint和paint setup事件将render树绘制为像素信息</li>
<li>断开链接，是否有keep-alive，有：关闭网页断开，网页运行期间，如果有新的请求不会重新链接即重新三次握手，没有keep-alive；客户端请求完之后立马断开链接，下次请求的话需要重新进行三次握手</li>
<li>4次挥手</li>
</ol>
<ul>
<li>客户端发送断开链接，进入等待状态，客户端进程发送链接释放的FIN&#x3D;1包</li>
<li>服务端同意，响应服务端收到FIN之后，如果同意断开链接就会发送一个ACK确认，ACK&#x3D;1，根据规定确认ack&#x3D;u+1，然后带上一个随机生成的序列号seq&#x3D;v。此时处于半链接状态，有可能服务端还有数据没有发完，所以继续发送未发完的数据</li>
<li>服务端发送完成之后进入等待状态，通知客户端可以断开练级了</li>
<li>客户端确认收到数据，服务端只要收到客户端发出的确认就进入关闭状态。服务器结束TCP链接的时间要比客户端早</li>
</ul>
<h3><span id="5-http和https的区别">5. http和https的区别</span></h3><ol>
<li><p>http的默认端口是80端口，https的默认端口是443</p>
</li>
<li><p>http采用的时明文传输，被接获后不安全，https采用的是加密传输，被截获时需要解密相对安全</p>
</li>
<li><p>ssl证书，ssl证书就是遵守ssl协议（他是在传输通讯协议（TCP&#x2F;IP）上实现的一种安全协议，采用公开密钥技术），由受信任的数组证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能，所以说http没有ssl，https有ssl证书</p>
</li>
<li><p>http：基于七层协议中的应用层（提供应用程序间的交换和数据交换）</p>
</li>
<li><p>https：基于7层协议中的传输层（传输层协议提供计算机之间的通信会话，并确保数据在计算机之间可靠的传输）</p>
</li>
<li><p>7层协议，物理层，数据链路层，网络层，传输层，会话层，表示层，应用层</p>
</li>
</ol>
<h3><span id="6-路由模式的区别">6. 路由模式的区别</span></h3><ol>
<li>abstract支持所有的javascript运行环境，如node.js服务端，如果发现浏览器没有的API，路由会自动强制进入这个模式</li>
<li>hash模式，地址栏里有#&#x2F;，底层实现是通过window.loaction.href进行跳转，通过onhashchange进行监听</li>
<li>history模式，没有#&#x2F;，底层实现原理是通过后的historyApi实现的，history.pushState和history.repleaceState进行跳转，通过onpropState进行监听，只能监听到前进和后退，无法监听histroy.pushState和history.repleaceState，源码中将history.pushState和history.repleaceState，进行了统一的包装，通过pushState函数进行包装，不管是history.pushState，还是history.repleacState实际底层最终都是会通过pushState这个函数进行跳转的，通过pushState进行监听。</li>
</ol>
<h3><span id="7-html5为什么只需要写">7. html5为什么只需要写<!DOCTYPE HTML>?</span></h3><ol>
<li>HTML5不基于SGML，因此不需要对DTD进行引用，但是需要DOCTYPE来规范浏览器的行为（让浏览器按照他们应该的方式来运行）</li>
<li>HTML4.01基于SGML，所以需要对DTD引用进行，才能让浏览器知道文档所使用的文档类型</li>
</ol>
<h3><span id="8-你遇到的兼容问题有哪些如何解决的">8. 你遇到的兼容问题有哪些，如何解决的</span></h3><ol>
<li>png24位的图片在ie6浏览器上出现背景，解决办法就是做成png8</li>
<li>浏览器默认的margin和padding不同，解决方案是加一个全局的margin:0，padding:0，来统一</li>
</ol>
<h3><span id="9-清除浮动的方式有哪些">9. 清除浮动的方式有哪些</span></h3><ol>
<li>给父元素添加overflow清除浮动</li>
<li>给父元素添加 inline-block 清除浮动</li>
</ol>
<h3><span id="10-前端开发性能优化围绕加载优化就可以了">10. 前端开发性能优化（围绕加载优化就可以了）</span></h3><ul>
<li><strong>加载</strong></li>
<li>减少http请求（精灵图，文件的合并）</li>
<li>减少文件的大小（资源压缩，图片压缩，代码压缩）</li>
<li>CDN（第三方库，大文件，大图）</li>
<li>SSR服务端渲染，预渲染</li>
<li>懒加载</li>
<li>分包</li>
<li><strong>操作</strong></li>
<li>减少dom操作，避免回流，包括vue中的v-for和v-if渲染dom</li>
</ul>
<p>将css放在文件头部，JavaScript文件放在底部，CSS执行会<code>阻塞渲染</code>，阻止JS执行，JS加载和执行会<code>阻塞HTML解析</code>，阻止<code>CSSOM</code>构建，如果这些css，js标签标签放在HEAD标签里，并且需要加载和解析很久的话，那么页面就空白了，所以JS文件要放在底部（不阻止DOM解析，但会阻止渲染），等HTML解析完了在加载JS文件，尽早向用户呈现页面的内容，那么CSS文件为什么要放在头部呢，因为先加载HTML在加载CSS，会让用户第一时间看到的页面是没有样式的，比较丑陋，为了避免这样情况发送，所以只能将CSS文件放在头部了，js文件也可以放在头部<code>script标签加上defer属性</code>就可以了，<code>异步下载</code>，延迟执行</p>
<h3><span id="11">11.</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> url =&gt; <span class="comment">// 统一资源定位符</span></span><br><span class="line"><span class="number">2.</span> ping www.<span class="property">baidu</span>.<span class="property">com</span>   <span class="comment">// 测试连接，检查网络是否能连接</span></span><br><span class="line"><span class="number">3.</span> <span class="variable constant_">TCP</span>连接不是持续的，可以借助<span class="comment">//websocket</span></span><br><span class="line"><span class="number">4.</span> html和css转化为dom树和css结构体，转换位render树，计算布局信息，调用<span class="variable constant_">UI</span>引擎渲染，呈现用户所见画面</span><br></pre></td></tr></table></figure>

<p>[…dom.matchAll(&#x2F;&lt;\s*?img[^&gt;]*?alt&#x3D;[“‘][^”]+?[‘“]&#x2F;g)]</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>工具合集</title>
    <url>/2022/03/17/%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
    <content><![CDATA[<h3><span id="1-element-ui">1. element-ui</span></h3><p>[element-ui](<a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a>)</p>
<h3><span id="2-vant-ui">2. Vant-ui</span></h3><p>[vant](<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/">Vant 3 - 轻量、可靠的移动端组件库 (gitee.io)</a>)</p>
<h3><span id="3-vue-i18n国际化插件">3. vue-i18n国际化插件</span></h3><p>[vue-i18n](<a href="https://kazupon.github.io/vue-i18n/zh/introduction.html">介绍 | Vue I18n (kazupon.github.io)</a>)</p>
<h3><span id="4-vue-element-admin">4. vue-element-admin</span></h3><p>[集成方案vue-element-admin](<a href="https://github.com/PanJiaChen/vue-element-admin">PanJiaChen&#x2F;vue-element-admin: A magical vue admin https://panjiachen.github.io/vue-element-admin</a>)</p>
<p>[基础模板](<a href="https://gitee.com/panjiachen/vue-admin-template">vue-admin-template: 这是一个极简的 vue admin 管理后台。它只包含了 Element UI &amp; axios &amp; iconfont &amp; permission control &amp; lint，这些搭建后台必要的东西 (gitee.com)</a>)</p>
<h3><span id="5piniavue状态管理库">5.Pinia，vue状态管理库</span></h3><p>[pinia](<a href="https://pinia.vuejs.org/">Home | Pinia (vuejs.org)</a>)</p>
<h3><span id="6lodash防抖深浅拷贝">6.lodash，防抖，深浅拷贝</span></h3><p>[lodash](<a href="https://www.lodashjs.com/">Lodash 简介 | Lodash 中文文档 | Lodash 中文网 (lodashjs.com)</a>)</p>
<h3><span id="7-cropperjs图片剪裁工具">7. cropperjs，图片剪裁工具</span></h3><p>[开发者博客](<a href="https://www.cnblogs.com/eightFlying/p/cropper-demo.html">cropperjs实践及中文文档（自译） - 灭灭 - 博客园 (cnblogs.com)</a>)</p>
<p>[文档地址](<a href="https://fengyuanchen.github.io/cropperjs/">Cropper.js (fengyuanchen.github.io)</a>)</p>
<h3><span id="8-dayjs时间处理插件">8. dayjs，时间处理插件</span></h3><p>[dayjs](<a href="https://dayjs.fenxianglu.cn/">Day.js中文网 (fenxianglu.cn)</a>)</p>
<h3><span id="9lodash工具集">9.lodash工具集</span></h3><ol>
<li>安装</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i lodash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;&#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用方法</p>
</blockquote>
<p>cloneDeep，深拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入lodash</span></span><br><span class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">const</span> allChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;产品&#x27;</span>, <span class="attr">id</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 实现深拷贝allChannels</span></span><br><span class="line"><span class="keyword">const</span> allChannelsCopy = lodash.<span class="title function_">cloneDeep</span>(allChannels)</span><br></pre></td></tr></table></figure>

<p>debounce，防抖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 定义count累加按钮 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入lodash</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 定义count数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 定义addCount方法，并进行防抖处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> addCount = lodash.<span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  count.<span class="property">value</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p> differenceBy，数组差集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;产品&#x27;</span>, <span class="attr">id</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> myChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用lodash实现allChannels和myChannels的差集</span></span><br><span class="line"><span class="keyword">const</span> diffChannels = lodash.<span class="title function_">differenceBy</span>(allChannels, myChannels, <span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p> uniqBy，数组去重</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;产品&#x27;</span>, <span class="attr">id</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现allChannels数组去重</span></span><br><span class="line"><span class="keyword">const</span> uniqueChannels = lodash.<span class="title function_">uniqBy</span>(allChannels, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p> sortBy，排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;产品&#x27;</span>, <span class="attr">id</span>: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// allChannels按照id进行排序</span></span><br><span class="line"><span class="keyword">const</span> sortedChannels = lodash.<span class="title function_">sortBy</span>(allChannels, [<span class="string">&#x27;id&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>intersectionBy，交集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;产品&#x27;</span>, <span class="attr">id</span>: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myChannels = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;前端&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;测试&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 求allChannels和myChannels的交集</span></span><br><span class="line"><span class="keyword">const</span> intersection = lodash.<span class="title function_">intersectionBy</span>(allChannels, myChannels, <span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p> isEmpty，判断对象是否为空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 判断obj是否为空</span></span><br><span class="line"><span class="keyword">const</span> isEmpty = lodash.<span class="title function_">isEmpty</span>(obj)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方包</title>
    <url>/2022/03/19/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</url>
    <content><![CDATA[<h3><span id="1-element-china-area-data地区联级选择器">1. element-china-area-data，地区联级选择器</span></h3><p>[参考文档](<a href="https://www.npmjs.com/package/element-china-area-data">element-china-area-data - npm (npmjs.com)</a>)</p>
<h3><span id="2-js-cookie">2. js-cookie</span></h3><p>[参考文档](<a href="https://www.npmjs.com/package/js-cookie">js-cookie - npm (npmjs.com)</a>)</p>
<h3><span id="3-vuex-persistedstatevue20vuex持久化工具">3. vuex-persistedstate，vue2.0，vuex持久化工具</span></h3><p>[参考文档](<a href="https://www.npmjs.com/package/vue-persistedstate">vue-persistedstate - npm (npmjs.com)</a>)</p>
<h3><span id="4-cos-js-sdk-v5-腾讯云-cos-js-sdk">4.  cos-js-sdk-v5 ，腾讯云 COS JS SDK</span></h3><p>[参考文档](<a href="https://www.npmjs.com/package/cos-js-sdk-v5">cos-js-sdk-v5 - npm (npmjs.com)</a>)</p>
]]></content>
      <categories>
        <category>true</category>
      </categories>
      <tags>
        <tag>第三方包</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp</title>
    <url>/2022/09/21/uniapp/</url>
    <content><![CDATA[<h3><span id="1-生命周期函数-api">1. 生命周期函数	+ api</span></h3><ul>
<li>onLaunch	当uni-app 初始化完成时触发（全局只触发一次）</li>
<li>onShow     当uni-app 启动，或从后台进入前台时显示</li>
<li>onHide     当uni-app 从前台进入后台</li>
<li>onError      当uni-app 报错时触发</li>
<li>onUniNViewMessage    </li>
<li>onUnhandledRejection</li>
</ul>
<p>API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> uni.<span class="title function_">pageScrollTo</span>(&#123;		<span class="comment">// 页面滚动条置底</span></span><br><span class="line">    <span class="attr">scrollTop</span>:<span class="number">9999999</span>,		<span class="comment">// 间隔距离</span></span><br><span class="line">    <span class="attr">duration</span>:<span class="number">0</span>		<span class="comment">// 间隔时间</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">2.</span> uni.<span class="title function_">setStorageSync</span>(<span class="string">&quot;chatList&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">chatList</span>))		<span class="comment">// 异步保存到本地 </span></span><br></pre></td></tr></table></figure>

<p>知识点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js中</span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开发环境&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生产环境&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>

<h3><span id="02-tabbar">02. tabBar</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;	<span class="comment">// pages.json &gt; tabbar</span></span><br><span class="line">   <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#7A7E83&quot;</span>,   <span class="comment">// tab上的文字默认颜色</span></span><br><span class="line">   <span class="string">&quot;selectedColor&quot;</span>: <span class="string">&quot;black&quot;</span>,	<span class="comment">// tab上的文字选中时的颜色</span></span><br><span class="line">   <span class="string">&quot;borderStyle&quot;</span>: <span class="string">&quot;white&quot;</span>,		<span class="comment">// barder上边框的颜色，仅支持black/white</span></span><br><span class="line">   <span class="string">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,	<span class="comment">// tab的背景颜色</span></span><br><span class="line">   <span class="string">&quot;list&quot;</span>: [&#123;</span><br><span class="line">       <span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,	<span class="comment">// tab上按钮文字</span></span><br><span class="line">       <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/home/home&quot;</span>,	<span class="comment">// 页面路径</span></span><br><span class="line">       <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/tab_icons/home.png&quot;</span>,	<span class="comment">// 图标路径</span></span><br><span class="line">       <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/tab_icons/home-active.png&quot;</span>	<span class="comment">// 选中时的图标路径</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="string">&quot;text&quot;</span>: <span class="string">&quot;分类&quot;</span>,</span><br><span class="line">       <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/cate/cate&quot;</span>,</span><br><span class="line">       <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/tab_icons/cate.png&quot;</span>,</span><br><span class="line">       <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/tab_icons/cate-active.png&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="string">&quot;text&quot;</span>: <span class="string">&quot;购物车&quot;</span>,</span><br><span class="line">       <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/cart/cart&quot;</span>,</span><br><span class="line">       <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/tab_icons/cart.png&quot;</span>,</span><br><span class="line">       <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/tab_icons/cart-active.png&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我的&quot;</span>,</span><br><span class="line">       <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/my/my&quot;</span>,</span><br><span class="line">       <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;static/tab_icons/my.png&quot;</span>,</span><br><span class="line">       <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;static/tab_icons/my-active.png&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h3><span id="3-跳转">3. 跳转</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span>. uni.<span class="title function_">navgateTo</span>(&#123;	<span class="comment">// 跳转到非tabbar页面</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/pages/index/index?name=张三&amp;age=18&quot;</span>			<span class="comment">// 在页面的onLoad:(option)=&gt;&#123;&#125;	// 中拿到页面参数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意url有长度限制，太长的字符串会传参失败，并且不规范的字符串也可能导致传参失败，所以对于复杂的参数建议使用encodeURL,decodeURL进行处理后传参</span></span><br><span class="line"><span class="number">02</span>. uni.<span class="title function_">swithTab</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/pages/index/index&quot;</span>	<span class="comment">// 跳转到tabbar页面</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">03</span>. &lt;navigator url=<span class="string">&quot;/subpages/chat/chat&quot;</span>&gt;跳转&lt;/navigator&gt;</span><br><span class="line"><span class="number">04</span>. url路径传参 <span class="comment">// 转码 encodeURI(&quot;https://baidu.com&quot;),onload(option)中decodeURI(option.url)</span></span><br><span class="line">	&lt;web-view :url=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;&lt;/webview&gt;</span><br></pre></td></tr></table></figure>

<h3><span id="4-小程序路由分包配置">4.  小程序路由分包配置</span></h3><p>因小程序有体积和资源加载限制，各家小程序平台提供了分包方式，优化小程序的下载和启动速度，所谓的主包，即放置默认启动页面及TabBar页面，而分包则是根据pages.json的配置进行划分。在小程序启动时，默认会下载主包并启动主包内页面，当用户进入分包内某个页面时，会把对应的分包自动下载下来，下载完成后再进行展示，此时终端界面会有等待提示</p>
<ol>
<li>在根目录下新建一个subpages目录，在该目录上新建一个页面，例如取名news新闻页面，这时候就有了subpages&gt;news&gt;news.vue</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;subPackages&quot;</span>: [&#123;					<span class="comment">// pages.json &gt; subPackages[]	分包数组	路由懒加载和预加载的过程</span></span><br><span class="line">  <span class="string">&quot;root&quot;</span>: <span class="string">&quot;subpackage&quot;</span>,	<span class="comment">// 子包的根目录</span></span><br><span class="line">  <span class="string">&quot;pages&quot;</span>: [&#123;		<span class="comment">// 子包由那些页面组成</span></span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;goods_detail/goods_detail&quot;</span>,	<span class="comment">// 页面路径</span></span><br><span class="line">    <span class="string">&quot;style&quot;</span>: &#123;	<span class="comment">// 页面样式</span></span><br><span class="line">      <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;&quot;</span>,	<span class="comment">// 导航标题文字内容</span></span><br><span class="line">      <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">false</span>	<span class="comment">// 是否开启下拉刷新</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;goods_list/goods_list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;onReachBottomDistance&quot;</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#eee&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure>

<h3><span id="5-uniapp-常用组件简介">5. UniAPP 常用组件简介</span></h3><ol>
<li>uni-app为开发者提供了一系列基础组件，类似HTML里的基础标签元素，但uni-app的组件与HTML不同，而是与小程序相同，更适合手机端使用</li>
<li>虽然不推荐使用HTML标签，但实际上如果开发者写了<code>div</code>等标签，在编译到非H5平台时也会被编译器转化为<code>view</code>标签，类似的还有<code>span</code>转<code>text</code>，<code>a</code>转<code>navigator</code>等，包括css里的元素选中器也会转，但为了管理方便，策略统一，新写代码时仍然建议使用view等组件</li>
<li>开发者可以通过这些基础组件进行快速开发，基于内置的基础组件，可以开发各种扩展组件，组件规范与vue组件相同</li>
</ol>
<h3><span id="6-判断平台">6. 判断平台</span></h3><p>平台判断有两种场景，一种是在编译期判断，一种是在运行期判断。编译期判断，即<code>条件编译</code>，不同平台在编译出包后已经是不同的代码</p>
<ol>
<li>条件编译</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef H5</span></span><br><span class="line"> <span class="title function_">alert</span>(<span class="string">&quot;只有在h5平台才会alert&quot;</span>)</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"><span class="comment">// 如上代码只会编译到H5的发行包里，其他平台的包不会包含如上代码</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行期判断，运行期判断是指代码已经打入包中，仍然需要在运行期判断平台，此时可以使用<code>uni.getSystemInfoSync().platform</code>，判断客户端环境是Android，ios还是小程序开发工具</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(uni.<span class="title function_">getSystemInfoSync</span>().<span class="property">platform</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;android&quot;</span> :</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;此时运营者Android上&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ios&quot;</span> ：</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;此时运营在ios环境上&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span> ：</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;运行在开发者工具上&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="7-小程序性能优化-高性能的用户体验才能更好的吸引和留住用户下面说说在小程序中的一些性能优化的方法">7. 小程序—–性能优化。高性能的用户体验才能更好的吸引和留住用户，下面说说在小程序中的一些性能优化的方法：</span></h3><p>1、控制项目包大小：小程序代码包大小不能超过2M，所以控制代码包大小尤为重要，减小项目代码包的措施有</p>
<p>1）.清理无用代码</p>
<p>2）.采用分包策略</p>
<p>3）.压缩图片，使用适当图片格式</p>
<p>4）.精简代码，去掉不必要的WXML结构和未使用的WXSS定义</p>
<p>2、图片优化</p>
<p>1）.大图尽量存储在服务器端或者使用云存储进行链接式加载</p>
<p>2）.多图片可采用懒加载方案</p>
<p>3、内存优化</p>
<p>1）.离开页面时回收当前页面的定时器，释放内存资源</p>
<p>2）.onPageScroll 事件回调必须使用节流函数，并在它的回调中避免使用 setData。部分场景尽量使用 IntersectionObserver API。</p>
<p>4、提升渲染性能</p>
<p>1）.在进入页面就显示的数据可在onLoad 阶段就可以发起请求，不用等ready</p>
<p>2）.请求结果放在缓存中, 下次接着用</p>
<p>3）.减少setData次数</p>
<p>4）.合并setData请求，减少通讯次数</p>
<p>5）.列表的局部更新可采用setData进行局部刷新方法</p>
<p>6）.使用自定义组件加载</p>
<p>7）.合理使用wx:if和hidden</p>
]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>题目大坑</title>
    <url>/2022/06/23/%E9%A2%98%E7%9B%AE%E5%A4%A7%E5%9D%91/</url>
    <content><![CDATA[<h3><span id="1-var-变量提升坑">1. var 变量提升坑</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(username) <span class="comment">// undefinede</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;张山&quot;</span></span><br><span class="line"><span class="number">2.</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(name)	<span class="comment">// 卡卡西</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;卡卡西&quot;</span></span><br></pre></td></tr></table></figure>

<h3><span id="2-深浅拷贝坑">2. 深浅拷贝坑</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]	<span class="comment">// 一维数组可以实现表象深拷贝</span></span><br><span class="line"><span class="keyword">let</span> newArr = [...arr]	</span><br><span class="line">newArr.<span class="title function_">push</span>(<span class="number">9</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,newArr) <span class="comment">// [1,3,5,7]	[1,3,5,7,9]</span></span><br></pre></td></tr></table></figure>

<h3><span id="3-this指向坑">3. this指向坑</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> a = <span class="number">33</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(&#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">22</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// undefinede  let换成var  则输出33</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>知识点总结</title>
    <url>/2022/03/23/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> seeHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>; <span class="comment">// 获取视口高度</span></span><br><span class="line"><span class="keyword">let</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>; <span class="comment">// 获取滚动条的高度</span></span><br><span class="line">img[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>)			<span class="comment">// 元素js获取dom属性</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>xiao_chengxu</title>
    <url>/2022/01/12/xiao-chengxu/</url>
    <content><![CDATA[<p>简介：主要收纳小程序的知识点</p>
<h3><span id="01-wxml和html的区别">01.  WXML和HTML的区别</span></h3><ol>
<li>标签名称不同</li>
</ol>
<p>THML（div，span，img，a）</p>
<p>WXML（view，text，image，navigator）</p>
<ol start="2">
<li>属性节点不同</li>
</ol>
<p>&lt; a href&#x3D;”#”&gt; 超链接 </p>
<p><navigator url="/pages/home/home"></navigator></p>
<ol start="3">
<li>提供了类似于Vue中的模板语法</li>
</ol>
<p>数据绑定</p>
<p>列表渲染</p>
<p>条件渲染</p>
<h3><span id="02-wvss-和-css-的区别">02 . WVSS 和 CSS 的区别</span></h3><ol>
<li>新增了rpx尺寸单位</li>
</ol>
<p>css中需要手动进行像素单位换算，例如rem</p>
<p>wxss在底层支持新的尺寸单位rpx，在不同大小的屏幕上小程序自动进行换算</p>
<ol start="2">
<li>提供了全局的样式和局部样式</li>
</ol>
<p>项目根目录中的 app.wxss 会作用于小程序页面</p>
<p>局部页面的 .wxss 样式仅对当前页面生效</p>
<ol start="3">
<li>WXSS 仅支持部分 CSS 选择器 （绝大多数的都是支持的）</li>
</ol>
<p>.class 和 #id </p>
<p>element</p>
<p>并集选择器，后代选择器</p>
<p>::after 和 ::before 等伪类选择器</p>
<h3><span id="03-页面的渲染过程">03. 页面的渲染过程</span></h3><ol>
<li>加载解析页面的 .json 配置文件</li>
<li>加载页面的 .wxml 模板和 .wxss 样式</li>
<li>执行页面的 .js 文件，调用 page() 创建页面实例</li>
<li>页面渲染完成</li>
</ol>
<h3><span id="04-常见组件">04. 常见组件</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 视图组件</span></span><br><span class="line"><span class="number">01</span> view 相当于div 块级元素</span><br><span class="line"><span class="number">02</span> scroll-view 上下滚动列表效果</span><br><span class="line"><span class="number">03</span> swiper swiper-item</span><br></pre></td></tr></table></figure>

<h3><span id="05-事件绑定">05. 事件绑定</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bindtap或<span class="attr">bind</span>:tap 手指触摸后马上离开，蕾仕于<span class="variable constant_">HTML</span>中的click事件</span><br><span class="line">input, change</span><br></pre></td></tr></table></figure>

<h3><span id="06-事件对象的属性列表">06. 事件对象的属性列表</span></h3><p>当事件回调触发的时候，会收到一个事件对象event，它的详细属性如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">type</td>
<td align="center">string</td>
<td align="center">事件类型</td>
</tr>
<tr>
<td align="center">timeStamp</td>
<td align="center">Integer</td>
<td align="center">页面打开到触发事件所经过的毫秒数</td>
</tr>
<tr>
<td align="center">target</td>
<td align="center">Object</td>
<td align="center">触发事件的组件的一些属性值集合</td>
</tr>
<tr>
<td align="center">currentTarget</td>
<td align="center">Object</td>
<td align="center">当前组件的一些属性值集合</td>
</tr>
<tr>
<td align="center">detail</td>
<td align="center">Object</td>
<td align="center">额外的信息</td>
</tr>
<tr>
<td align="center">touches</td>
<td align="center">Array</td>
<td align="center">触摸事件，当前停留在屏幕中的触摸点信息的数组</td>
</tr>
<tr>
<td align="center">changedTouches</td>
<td align="center">Array</td>
<td align="center">触摸事件，当前变化的触摸点信息的数组</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
